{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/google62862a48c88e4bd3.html","hash":"7bb3982da9da99224ba7852c8ece77ea6bce7562","modified":1521445782550},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1519643018756},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1519643018757},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1519643018759},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1519643018768},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1519643018769},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1519643018758},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1519643018771},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1519643018770},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1519643018772},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1519643018773},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1519643018774},{"_id":"themes/next/_config.yml","hash":"bb3f1561c386fac79f53ddc50ddc0ad1cb001599","modified":1523172828061},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1519643018777},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1519643018778},{"_id":"themes/next/old.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1519643018863},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1519643018863},{"_id":"source/_posts/Android性能优化.md","hash":"178df7d92bf1c0e6ed4819b6db7e7e7ad2b91876","modified":1523175435007},{"_id":"source/_posts/Native层调用Java层方法.md","hash":"9886b04ccdbdc3611d2f4790ab5538b0ec5c0a1c","modified":1523172828060},{"_id":"source/_posts/从零学自动化测试之一文学会junit4(二).md","hash":"cf22bc179b86d83fe0ae6b3d6353cbab04c4b905","modified":1521446962073},{"_id":"source/_posts/从零学自动化测试之appium环境(一).md","hash":"9e7c193fcdb1ff7c160c5e7f98d72511f4fdc32c","modified":1521446962071},{"_id":"source/_posts/从零学自动化测试之appium编译.md","hash":"e63c33dd306542e9172f6c7113849c2d010d882a","modified":1521446962071},{"_id":"source/categories/index.md","hash":"8e922e6ced748942f61dd4f40239efe7de13eba0","modified":1519643018652},{"_id":"source/tags/index.md","hash":"e2ec2064374db30a481c507fab373cff85ccbb1e","modified":1519643018654},{"_id":"source/_posts/Java层调用Native层函数.md","hash":"177198dc29c64f8f22fdf3d10838322f91e13a66","modified":1523172828059},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1519643018780},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1519643018779},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1519643018781},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1519643018782},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1519643018783},{"_id":"source/about/index.md","hash":"1beeeeee9751b2b3b7a2a7ce7dbaab0525a5038f","modified":1523172812426},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1519643018784},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1519643018785},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1519643018786},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1519643018788},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1519643018790},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1519643018786},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1519643018790},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1519643018789},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1519643018792},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1519643018793},{"_id":"themes/next/languages/zh-Hans.yml","hash":"37da99b5666e191510974fd9599c984cbe4b0d54","modified":1520824155399},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1519643018796},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1519643018857},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1519643018858},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1519643018859},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1519643018859},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1519643018861},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1519643018860},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1519643018862},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1519643018865},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1519643018866},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1519643019109},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1519643019110},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1519643019111},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018983},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1519643018794},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1519643018795},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1519643018798},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1519643018798},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1519643018799},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1519643018800},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1519643018801},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1519643018802},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3a1079db5db0ab6ca3d3618c170a620a011c96ad","modified":1520824091298},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1519643018803},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1519643018805},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1519643018808},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1519643018809},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1519643018810},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1519643018811},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1519643018818},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1519643018819},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1519643018824},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1519643018845},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1519643018846},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1519643018846},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1519643018847},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1519643018848},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1519643018849},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1519643018850},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1519643018867},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1519643018868},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1519643018869},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1519643018869},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1519643018871},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1519643018884},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1519643018870},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1519643018886},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1519643018887},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1519643018982},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1519643018984},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1519643018984},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1519643018985},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1519643018986},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1519643018989},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1519643018987},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1519643018990},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1519643018989},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1519643018991},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1519643018992},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1519643018993},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1519643018993},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519643018995},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1519643018996},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1519643018996},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1519643018997},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1519643018998},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1519643018999},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018822},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018822},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018954},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018955},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018979},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018981},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1519643018957},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"42916be7bca1425c28f4dd263ca17153101850a7","modified":1519643019108},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1519643018806},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1519643018807},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1519643018812},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1519643018814},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1519643018813},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1519643018815},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1519643018816},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1519643018816},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1519643018817},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1519643018821},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1519643018823},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1519643018825},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1519643018827},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1519643018826},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1519643018828},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1519643018830},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1519643018831},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1519643018829},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1519643018832},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1519643018832},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1519643018833},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1519643018834},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1519643018835},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1519643018837},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1519643018839},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1519643018837},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1519643018840},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1519643018841},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1519643018841},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1519643018842},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1519643018843},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1519643018836},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1519643018844},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1519643018820},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d261de11c8011d531095dd2447a0d91b5ddc6f2c","modified":1523172828062},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1519643018853},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1519643018854},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1519643018855},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1519643018953},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1519643018956},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1519643018954},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1519643018956},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1519643018978},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1519643018978},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1519643018980},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1519643018981},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1519643019000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1519643019002},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1519643019001},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1519643019003},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1519643019003},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1519643019004},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1519643019006},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1519643019006},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1519643019009},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1519643019010},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1519643019011},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1519643019022},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1519643019027},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1519643019028},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1519643019029},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1519643019026},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1519643019044},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1519643019045},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1519643019046},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1519643019047},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1519643019050},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1519643019051},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1519643019052},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1519643019052},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1519643019053},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1519643019068},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1519643019076},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1519643019077},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1519643019078},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1519643019070},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1519643019071},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1519643019073},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1519643019074},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1519643019072},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1519643019075},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1519643019079},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1519643019082},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1519643019081},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1519643019080},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1519643019084},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1519643019083},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1519643019084},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1519643019085},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1519643019086},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1519643019087},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1519643019089},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1519643019089},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1519643019088},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1519643019092},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1519643019092},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1519643019090},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1519643019093},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1519643019100},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1519643019101},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1519643019105},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1519643019104},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1519643019106},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1519643019069},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1519643018851},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1519643018890},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1519643018852},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1519643018891},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1519643018892},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1519643018893},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1519643018889},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1519643018906},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1519643018928},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1519643018946},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1519643018949},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1519643018950},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1519643018948},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1519643018951},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1519643018952},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1519643018958},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1519643018960},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1519643018961},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1519643018947},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1519643018963},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1519643018964},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1519643018961},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1519643018962},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1519643018959},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1519643018967},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1519643018968},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1519643018970},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1519643018969},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1519643018970},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1519643018974},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1519643018973},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1519643018973},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1519643018976},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1519643018975},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1519643019008},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1519643018977},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1519643019018},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1519643019020},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1519643019021},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519643019030},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519643019031},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519643019032},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519643019033},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519643019034},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519643019033},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1519643019041},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1519643019043},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1519643019048},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1519643019049},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1519643019054},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1519643019055},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1519643019056},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1519643019042},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1519643019098},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1519643019099},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1519643019019},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1519643019065},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1519643019067},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1519643019103},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1519643018894},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1519643018896},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1519643018895},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1519643018897},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1519643018899},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1519643018898},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1519643018898},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1519643018900},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1519643018901},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1519643018902},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1519643018903},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1519643018904},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1519643018907},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1519643018905},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1519643018910},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1519643018904},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1519643018909},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1519643018910},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1519643018912},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1519643018913},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1519643018914},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1519643018915},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1519643018915},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1519643018917},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1519643018911},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1519643018919},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1519643018918},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1519643018908},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1519643018916},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1519643018920},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1519643018921},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1519643018921},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1519643018922},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1519643018924},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1519643018923},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1519643018925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1519643018926},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1519643018927},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1519643018926},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1519643018930},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1519643018931},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1519643018932},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1519643018929},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1519643018932},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1519643018935},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1519643018937},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1519643018934},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1519643018936},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1519643018933},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1519643018940},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1519643018939},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1519643018938},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1519643018941},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1519643018942},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1519643018945},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1519643018944},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1519643018943},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1519643018943},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1519643018965},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1519643018966},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1519643018972},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1519643019014},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1519643019015},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1519643019013},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1519643019016},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1519643019016},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1519643019036},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1519643019037},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1519643019039},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1519643019040},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1519643019038},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519643019035},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1519643019058},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1519643019060},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1519643019064},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1519643019025},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1519643019097},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1519643019062},{"_id":"public/content.json","hash":"5a64a3f9cd3e7ff5a5b226b9397ec08a9ea2deb0","modified":1523175463418},{"_id":"public/google62862a48c88e4bd3.html","hash":"2f37f9f52ae0036af165659af255404a2c9363ff","modified":1523175463515},{"_id":"public/categories/index.html","hash":"cc50f3b89fef44498e8da3c2a0851003c59d4c27","modified":1523175463515},{"_id":"public/tags/index.html","hash":"d5237bd9da169430c4932331f22fef7e0593bbd5","modified":1523175463515},{"_id":"public/about/index.html","hash":"467113177298e56f681d5c96a6bb7fabb0053328","modified":1523175463515},{"_id":"public/archives/index.html","hash":"88545d7ee71d1ed1331c4dfc14b5b76f067d31d1","modified":1523175463516},{"_id":"public/archives/2018/index.html","hash":"d7a91b1e67665459f37f4196f0787d254b8df99a","modified":1523175463516},{"_id":"public/archives/2018/03/index.html","hash":"14d259b38abb8c1dba1820a11c4c36645b11ea8a","modified":1523175463516},{"_id":"public/archives/2018/04/index.html","hash":"e7a1a1a8579ef4784edf521f4bdf332db5fe6f88","modified":1523175463516},{"_id":"public/categories/Android/index.html","hash":"a2fd76ebfee9d942b0cb1b572d8a8724b1912189","modified":1523175463516},{"_id":"public/categories/java/index.html","hash":"99427d1d2e819a22eaf13d38509bc7d459444449","modified":1523175463516},{"_id":"public/categories/从零学自动化测试/index.html","hash":"114bf1a753862962c9cc256d1510acf5a94297ac","modified":1523175463516},{"_id":"public/tags/Performance/index.html","hash":"d984f6519eafc6c0f3afe100416390a4c7bdd675","modified":1523175463516},{"_id":"public/tags/jni/index.html","hash":"f4d29e86bfaa428baff85dbec72880a5d102725a","modified":1523175463516},{"_id":"public/tags/appium/index.html","hash":"45312be7bd524b6f93148c07a77100733d3bb133","modified":1523175463516},{"_id":"public/2018/04/08/Android性能优化/index.html","hash":"2137753668389a2af5a133faad321b0668481cb8","modified":1523175463516},{"_id":"public/2018/04/08/Native层调用Java层方法/index.html","hash":"89138bb3c6cacd4e0a5bacbf04e198cd868500e8","modified":1523175463516},{"_id":"public/2018/04/08/Java层调用Native层函数/index.html","hash":"4654e3bb81c3a46bb8e1ebdf13a741d354b3facc","modified":1523175463516},{"_id":"public/2018/03/19/从零学自动化测试之一文学会junit4(二)/index.html","hash":"29d1a0d4cd487de057749fb5ff7fe3af8fb526f2","modified":1523175463516},{"_id":"public/2018/03/19/从零学自动化测试之appium编译/index.html","hash":"31adc238893db10f6ca1eb3c7fa98a9f2132ffc4","modified":1523175463516},{"_id":"public/2018/03/19/从零学自动化测试之appium环境(一)/index.html","hash":"8f7a2938c16d022d8af19a8f7da21439e747662f","modified":1523175463516},{"_id":"public/index.html","hash":"40e742754b649df27ac7fc05e8819a43f96936e7","modified":1523175463516},{"_id":"public/tags/junit/index.html","hash":"9dd7e31b0c032bbbb43d73677991da21f3c20460","modified":1523175463526},{"_id":"public/tags/源码/index.html","hash":"2bf211e83a43d5c53d8c2229d36152b198826529","modified":1523175463526},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523175463526},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523175463526},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523175463526},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523175463526},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523175463526},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523175463526},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523175463526},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523175463526},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523175463526},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523175463526},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523175463526},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523175463526},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523175463526},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523175463526},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523175463526},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523175463526},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523175463526},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523175463526},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523175463526},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523175463526},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523175463526},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523175463526},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523175463526},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523175463526},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523175463527},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523175463527},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523175463527},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523175463527},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523175463527},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523175463527},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523175463527},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523175463527},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523175463527},{"_id":"public/uploads/avatar.jpg","hash":"42916be7bca1425c28f4dd263ca17153101850a7","modified":1523175463969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523175463980},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523175463991},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523175464005},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523175464005},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523175464005},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523175464005},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523175464005},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523175464005},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523175464005},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523175464006},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523175464006},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523175464006},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523175464006},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523175464006},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523175464006},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523175464006},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523175464006},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523175464006},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523175464006},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523175464006},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523175464006},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523175464006},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523175464006},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523175464007},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523175464007},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523175464007},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523175464007},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523175464007},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523175464007},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523175464007},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523175464007},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523175464007},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523175464008},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523175464008},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523175464008},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523175464008},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523175464008},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523175464008},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523175464008},{"_id":"public/css/main.css","hash":"d7ba6e33c80002096302293c38fd15e9b37c5d60","modified":1523175464008},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523175464008},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523175464008},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523175464008},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523175464008},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523175464008},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523175464008},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523175464008},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523175464008},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523175464008},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523175464009},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523175464009},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523175464009},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523175464009},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523175464009},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523175464009},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523175464009},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523175464009},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523175464009},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523175464009},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523175464009},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523175464010},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523175464010},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523175464010},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523175464045}],"Category":[{"name":"Android","_id":"cjfqjcccj0005qoy87ub4q01t"},{"name":"java","_id":"cjfqjcccz000bqoy83e529gck"},{"name":"从零学自动化测试","_id":"cjfqjccd3000gqoy8r5815wvb"}],"Data":[],"Page":[{"_content":"google-site-verification: google62862a48c88e4bd3.html","source":"google62862a48c88e4bd3.html","raw":"google-site-verification: google62862a48c88e4bd3.html","date":"2018-03-19T07:51:02.043Z","updated":"2018-03-19T07:49:42.550Z","path":"google62862a48c88e4bd3.html","title":"","comments":1,"layout":"page","_id":"cjfqjcc6l0000qoy8x3v7ofd2","content":"google-site-verification: google62862a48c88e4bd3.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google62862a48c88e4bd3.html"},{"title":"分类汇总","date":"2018-02-24T07:59:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类汇总\ndate: 2018-02-24 15:59:26\ntype: \"categories\"\n---\n","updated":"2018-02-26T11:03:38.652Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfqjcccc0002qoy8u4anjlc9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签汇总","date":"2018-02-24T07:55:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签汇总\ndate: 2018-02-24 15:55:07\ntype: \"tags\"\n---\n","updated":"2018-02-26T11:03:38.654Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjfqjcccf0004qoy8w0km939j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2018-02-24T08:03:31.000Z","type":"about","_content":"\n## 个人信息 ##\n\n- 姓名：张洋\n- 所在城市：北京\n- 联系方式：18201502550\n- 邮箱：601233308@qq.com\n- 企鹅：601233308\n- github：yangzaiCN\n- 公司：奇虎360\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-02-24 16:03:31\ntype: \"about\"\n---\n\n## 个人信息 ##\n\n- 姓名：张洋\n- 所在城市：北京\n- 联系方式：18201502550\n- 邮箱：601233308@qq.com\n- 企鹅：601233308\n- github：yangzaiCN\n- 公司：奇虎360\n\n\n","updated":"2018-04-08T07:33:32.426Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfqjcccp0008qoy8oij904cl","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：张洋</li>\n<li>所在城市：北京</li>\n<li>联系方式：18201502550</li>\n<li>邮箱：<a href=\"mailto:601233308@qq.com\" target=\"_blank\" rel=\"noopener\">601233308@qq.com</a></li>\n<li>企鹅：601233308</li>\n<li>github：yangzaiCN</li>\n<li>公司：奇虎360</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：张洋</li>\n<li>所在城市：北京</li>\n<li>联系方式：18201502550</li>\n<li>邮箱：<a href=\"mailto:601233308@qq.com\" target=\"_blank\" rel=\"noopener\">601233308@qq.com</a></li>\n<li>企鹅：601233308</li>\n<li>github：yangzaiCN</li>\n<li>公司：奇虎360</li>\n</ul>\n"}],"Post":[{"title":"Android性能优化","_content":"\n### app启动优化 ###\n\t\n- 鸿洋 [必知必会 | Android 性能优化的方面方面都在这儿](https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650824552&idx=1&sn=a634748d786072ecb083e46f27362d87&chksm=80b78bf6b7c002e09b949b7fbc14b9ae0eb97d8794aca6fa6d42f80afcd27d07947641bab083&mpshare=1&scene=1&srcid=0408dEqpe7PworVEFoOxF5gw#rd)\n- 高建武 [Android 性能优化必知必会](http://androidperformance.com/2017/10/19/Android-performance-optimization-skills-and-tools.html)\n- [Android性能优化（一）之启动加速35%](https://www.jianshu.com/p/f5514b1a826c)\n- [ ConstraintLayout 完全解析 快来优化你的布局吧](https://blog.csdn.net/lmj623565791/article/details/78011599)\n","source":"_posts/Android性能优化.md","raw":"---\ntitle: Android性能优化\ncategories:\n- Android\ntags:\n- Performance\n\n---\n\n### app启动优化 ###\n\t\n- 鸿洋 [必知必会 | Android 性能优化的方面方面都在这儿](https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&mid=2650824552&idx=1&sn=a634748d786072ecb083e46f27362d87&chksm=80b78bf6b7c002e09b949b7fbc14b9ae0eb97d8794aca6fa6d42f80afcd27d07947641bab083&mpshare=1&scene=1&srcid=0408dEqpe7PworVEFoOxF5gw#rd)\n- 高建武 [Android 性能优化必知必会](http://androidperformance.com/2017/10/19/Android-performance-optimization-skills-and-tools.html)\n- [Android性能优化（一）之启动加速35%](https://www.jianshu.com/p/f5514b1a826c)\n- [ ConstraintLayout 完全解析 快来优化你的布局吧](https://blog.csdn.net/lmj623565791/article/details/78011599)\n","slug":"Android性能优化","published":1,"date":"2018-04-08T07:34:42.674Z","updated":"2018-04-08T08:17:15.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjccc70001qoy8zbjmtsdx","content":"<h3 id=\"app启动优化\"><a href=\"#app启动优化\" class=\"headerlink\" title=\"app启动优化\"></a>app启动优化</h3><ul>\n<li>鸿洋 <a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650824552&amp;idx=1&amp;sn=a634748d786072ecb083e46f27362d87&amp;chksm=80b78bf6b7c002e09b949b7fbc14b9ae0eb97d8794aca6fa6d42f80afcd27d07947641bab083&amp;mpshare=1&amp;scene=1&amp;srcid=0408dEqpe7PworVEFoOxF5gw#rd\" target=\"_blank\" rel=\"noopener\">必知必会 | Android 性能优化的方面方面都在这儿</a></li>\n<li>高建武 <a href=\"http://androidperformance.com/2017/10/19/Android-performance-optimization-skills-and-tools.html\" target=\"_blank\" rel=\"noopener\">Android 性能优化必知必会</a></li>\n<li><a href=\"https://www.jianshu.com/p/f5514b1a826c\" target=\"_blank\" rel=\"noopener\">Android性能优化（一）之启动加速35%</a></li>\n<li><a href=\"https://blog.csdn.net/lmj623565791/article/details/78011599\" target=\"_blank\" rel=\"noopener\"> ConstraintLayout 完全解析 快来优化你的布局吧</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"app启动优化\"><a href=\"#app启动优化\" class=\"headerlink\" title=\"app启动优化\"></a>app启动优化</h3><ul>\n<li>鸿洋 <a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650824552&amp;idx=1&amp;sn=a634748d786072ecb083e46f27362d87&amp;chksm=80b78bf6b7c002e09b949b7fbc14b9ae0eb97d8794aca6fa6d42f80afcd27d07947641bab083&amp;mpshare=1&amp;scene=1&amp;srcid=0408dEqpe7PworVEFoOxF5gw#rd\" target=\"_blank\" rel=\"noopener\">必知必会 | Android 性能优化的方面方面都在这儿</a></li>\n<li>高建武 <a href=\"http://androidperformance.com/2017/10/19/Android-performance-optimization-skills-and-tools.html\" target=\"_blank\" rel=\"noopener\">Android 性能优化必知必会</a></li>\n<li><a href=\"https://www.jianshu.com/p/f5514b1a826c\" target=\"_blank\" rel=\"noopener\">Android性能优化（一）之启动加速35%</a></li>\n<li><a href=\"https://blog.csdn.net/lmj623565791/article/details/78011599\" target=\"_blank\" rel=\"noopener\"> ConstraintLayout 完全解析 快来优化你的布局吧</a></li>\n</ul>\n"},{"title":"Native层调用Java层方法","_content":"接着上一篇，来学习下Native层调用Java层方法。\n我们都知道，java语言是由虚拟机解释执行的，如果我们想用C语言执行java程序，那么必然要创建一个虚拟机，然后去加载指定的类，如果是静态方法，直接用类调用，如果不是静态的，那么还要创建对象，在调用方法，所以我们大概的罗列下步骤：\n<!-- more -->\n- 创建虚拟机\n- 获得class\n- 实例化对象\n&emsp;&emsp;1.对于静态方法，不需要实例化对象\n&emsp;&emsp;2.实例化对象\n- 调用Java方法\n&emsp;&emsp;1.获得方法ID\n&emsp;&emsp;2.构造参数\n&emsp;&emsp;3.调用方法\n\n那么我们该如何创建虚拟机，构造参数等等呢？这就需要查jni文档了，其实我们需要的方法都罗列在jni.h的头文件里了。\n我们需要用到如下几个方法：JNI_CreateJavaVM、JNIEnv.FindClass、JNIEnv.GetStaticMethodID、JNIEnv.CallStaticVoidMethod\n从字面上我们很好理解方法的用途，具体的参数类型就要查文档了。\n查官方文档Creating the Java Virtual Machine这一节，发现如何创建虚拟机，我简化下并抽取成方法create_vm：\n\n```\njint create_vm(JavaVM** jvm, JNIEnv** env) {  \n    JavaVMInitArgs args;  \n    JavaVMOption options[1];  \n    args.version = JNI_VERSION_1_6;  \n    args.nOptions = 1;  \n    options[0].optionString = \"-Djava.class.path=./\";  \n    args.options = options;  \n    args.ignoreUnrecognized = JNI_FALSE;  \n    return JNI_CreateJavaVM(jvm, (void **)env, &args);  \n}  \n```\n\n我们在定义一个Hello的java类\n\n```\npublic class Hello {\n\tpublic static void main(String args[]) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}\n```\n\n新建Native类c_call_java.c:\n\n```\n#include <stdio.h>  \n#include <jni.h> \n//根据文档，简化一个创建jvm的方法\njint create_vm(JavaVM** jvm, JNIEnv** env) {  \n    JavaVMInitArgs args;  \n    JavaVMOption options[1];  \n    args.version = JNI_VERSION_1_6;  \n    args.nOptions = 1;  \n    options[0].optionString = \"-Djava.class.path=./\";  \n    args.options = options;  \n    args.ignoreUnrecognized = JNI_FALSE;  \n    return JNI_CreateJavaVM(jvm, (void **)env, &args);  \n}  \n\n\nint main(int argc, char **argv){\n\t/* 定义jvm与env的指针 */\n\tJavaVM* jvm;\n\tJNIEnv* env;\n\n\tjclass cls;\n\tint ret = 0;\n\n\tjmethodID mid;\n\t\t\n\t/* 1. 创建虚拟机 */\n\tif (create_vm(&jvm, &env)) {\n\t\tprintf(\"can not create jvm\\n\");\n\t\treturn -1;\n\t}\n\t\t\n\t/* 2. 让虚拟机加载Hello类 */\n\tcls = (*env)->FindClass(env, \"Hello\");\n\tif (cls == NULL) {\n\t\tprintf(\"can not find hello class\\n\");\n\t\tret = -1;\n\t\tgoto destroy;\n\t}\n\n\t/* 3. 创建Hello对象 */\n\n\t/* 4. 调用方法\n\t * 4.1 获取方法id\n\t * 4.2 拼装方法参数\n\t * 4.3 正在的调用方法\n\t */\n\t//通过方法签名获取方法id，并映射到jmethodID中\n\tmid = (*env)->GetStaticMethodID(env, cls, \"main\",\"([Ljava/lang/String;)V\");\n\tif (mid == NULL) {\n\t\tret = -1;\n\t\tprintf(\"can not get method\\n\");\n\t\tgoto destroy;\n\t}\n\t//调用方法\n\t(*env)->CallStaticVoidMethod(env, cls, mid, NULL);\n\ndestroy:\n\t//销毁jvm\n\t(*jvm)->DestroyJavaVM(jvm);\n\treturn ret;\n}\n```\n有了虚拟机，加载了class，然后就可以调用方法了，jni约定了调用方法只需要传递相应的方法签名即可，这个签名封装为jmethodID。\n例如：\"main\",\"([Ljava/lang/String;)V\"  就是调用参数为String数组，返回值为void的main方法，具体方法与返回值类型该怎么写\n就要拆看jni的字段描述符  或者用javah来辅助生成方法签名\n![](https://i.imgur.com/W973V3Z.png)\n在写字段描述符的时候要注意几点：\n- 用\"[\"表示数组，比如\"int []\"表示为\"[I\"\n- 对于类，要用全称\"L包.子包.类名;\"(前面有\"L\"，后面有\";\")，比如\"Ljava/lang/String;\"\n- 除String类外，其他的类都用Object表示，即\"Ljava/lang/Object;\"\n\n所以我们Hello.java中的main方法就可以写成这样了 \"main\",\"([Ljava/lang/String;)V\" \n这里调用的是Hello的主方法，由于是静态的，不需要创建对象，而且不需要传递参数，所以CallStaticVoidMethod的最后一个参数列表为NULL。\n上传Hello.java c_call_java.c文件,这里我们用到了jni.h文件还有创建虚拟机的方法，需要引入jni.h以及libjvm.so库：\n用grep搜索下JNI_CreateJavaVM在哪个库中定义了\n> book@book-desktop:/usr/lib/jvm$ grep \"JNI_CreateJavaVM\" -r .\n> ./java-6-sun/jre/lib/i386/server/libjvm.so matches\n发现在libjvm.so中有定义，所以链接进去。\n> gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm\n除此之外还要在运行时指定libjvm.so  所以将so加入到环境变量中\nLD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server \n完整编译命令是：\n\n```\njavac Hello.java\n//在文件夹下查询  grep \"JNI_CreateJavaVM\" -r .\n//-L指定库路径 -ljvm 把库链接进去  \ngcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm\n//设置环境变量\nLD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server ./caller\n```\n\n最后输出 ：Hello，world！\n\n### 总结： ###\nNative调用Java方法主要就三步，创建虚拟机，加载类，调用方法，这里我们没有考虑方法参数问题，是最简易的demo，如果想进一步学习可以到官网查看文档。\n补充说一点，我们知道Android就是C与Java实现的，所以Android内核启动Java应用层时肯定也使用到C调Java的技术，通过翻看Android的源代码，找到了Zygote进程打开Java世界就有以下代码：\n\n```\nApp_main.cpp:\nruntime.start(\"com.android.internal.os.ZygoteInit\",startSystemServer);\n\nAndroidRuntime.cpp\n...\nif (startVm(&mJavaVM, &env, zygote) != 0) {\n        return;\n}\n...\njclass startClass = env->FindClass(slashClassName);\njmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\"([Ljava/lang/String;)V\");\nenv->CallStaticVoidMethod(startClass, startMeth, strArray);\n\n```\n这样Android就通过ZygoteInit 的main方法进入Java世界，应用工程师就不用关心底层世界了。\n\n\n\n","source":"_posts/Native层调用Java层方法.md","raw":"---\ntitle: Native层调用Java层方法\ncategories:\n- java\ntags:\n- jni\n\n---\n接着上一篇，来学习下Native层调用Java层方法。\n我们都知道，java语言是由虚拟机解释执行的，如果我们想用C语言执行java程序，那么必然要创建一个虚拟机，然后去加载指定的类，如果是静态方法，直接用类调用，如果不是静态的，那么还要创建对象，在调用方法，所以我们大概的罗列下步骤：\n<!-- more -->\n- 创建虚拟机\n- 获得class\n- 实例化对象\n&emsp;&emsp;1.对于静态方法，不需要实例化对象\n&emsp;&emsp;2.实例化对象\n- 调用Java方法\n&emsp;&emsp;1.获得方法ID\n&emsp;&emsp;2.构造参数\n&emsp;&emsp;3.调用方法\n\n那么我们该如何创建虚拟机，构造参数等等呢？这就需要查jni文档了，其实我们需要的方法都罗列在jni.h的头文件里了。\n我们需要用到如下几个方法：JNI_CreateJavaVM、JNIEnv.FindClass、JNIEnv.GetStaticMethodID、JNIEnv.CallStaticVoidMethod\n从字面上我们很好理解方法的用途，具体的参数类型就要查文档了。\n查官方文档Creating the Java Virtual Machine这一节，发现如何创建虚拟机，我简化下并抽取成方法create_vm：\n\n```\njint create_vm(JavaVM** jvm, JNIEnv** env) {  \n    JavaVMInitArgs args;  \n    JavaVMOption options[1];  \n    args.version = JNI_VERSION_1_6;  \n    args.nOptions = 1;  \n    options[0].optionString = \"-Djava.class.path=./\";  \n    args.options = options;  \n    args.ignoreUnrecognized = JNI_FALSE;  \n    return JNI_CreateJavaVM(jvm, (void **)env, &args);  \n}  \n```\n\n我们在定义一个Hello的java类\n\n```\npublic class Hello {\n\tpublic static void main(String args[]) {\n\t\tSystem.out.println(\"Hello, world!\");\n\t}\n}\n```\n\n新建Native类c_call_java.c:\n\n```\n#include <stdio.h>  \n#include <jni.h> \n//根据文档，简化一个创建jvm的方法\njint create_vm(JavaVM** jvm, JNIEnv** env) {  \n    JavaVMInitArgs args;  \n    JavaVMOption options[1];  \n    args.version = JNI_VERSION_1_6;  \n    args.nOptions = 1;  \n    options[0].optionString = \"-Djava.class.path=./\";  \n    args.options = options;  \n    args.ignoreUnrecognized = JNI_FALSE;  \n    return JNI_CreateJavaVM(jvm, (void **)env, &args);  \n}  \n\n\nint main(int argc, char **argv){\n\t/* 定义jvm与env的指针 */\n\tJavaVM* jvm;\n\tJNIEnv* env;\n\n\tjclass cls;\n\tint ret = 0;\n\n\tjmethodID mid;\n\t\t\n\t/* 1. 创建虚拟机 */\n\tif (create_vm(&jvm, &env)) {\n\t\tprintf(\"can not create jvm\\n\");\n\t\treturn -1;\n\t}\n\t\t\n\t/* 2. 让虚拟机加载Hello类 */\n\tcls = (*env)->FindClass(env, \"Hello\");\n\tif (cls == NULL) {\n\t\tprintf(\"can not find hello class\\n\");\n\t\tret = -1;\n\t\tgoto destroy;\n\t}\n\n\t/* 3. 创建Hello对象 */\n\n\t/* 4. 调用方法\n\t * 4.1 获取方法id\n\t * 4.2 拼装方法参数\n\t * 4.3 正在的调用方法\n\t */\n\t//通过方法签名获取方法id，并映射到jmethodID中\n\tmid = (*env)->GetStaticMethodID(env, cls, \"main\",\"([Ljava/lang/String;)V\");\n\tif (mid == NULL) {\n\t\tret = -1;\n\t\tprintf(\"can not get method\\n\");\n\t\tgoto destroy;\n\t}\n\t//调用方法\n\t(*env)->CallStaticVoidMethod(env, cls, mid, NULL);\n\ndestroy:\n\t//销毁jvm\n\t(*jvm)->DestroyJavaVM(jvm);\n\treturn ret;\n}\n```\n有了虚拟机，加载了class，然后就可以调用方法了，jni约定了调用方法只需要传递相应的方法签名即可，这个签名封装为jmethodID。\n例如：\"main\",\"([Ljava/lang/String;)V\"  就是调用参数为String数组，返回值为void的main方法，具体方法与返回值类型该怎么写\n就要拆看jni的字段描述符  或者用javah来辅助生成方法签名\n![](https://i.imgur.com/W973V3Z.png)\n在写字段描述符的时候要注意几点：\n- 用\"[\"表示数组，比如\"int []\"表示为\"[I\"\n- 对于类，要用全称\"L包.子包.类名;\"(前面有\"L\"，后面有\";\")，比如\"Ljava/lang/String;\"\n- 除String类外，其他的类都用Object表示，即\"Ljava/lang/Object;\"\n\n所以我们Hello.java中的main方法就可以写成这样了 \"main\",\"([Ljava/lang/String;)V\" \n这里调用的是Hello的主方法，由于是静态的，不需要创建对象，而且不需要传递参数，所以CallStaticVoidMethod的最后一个参数列表为NULL。\n上传Hello.java c_call_java.c文件,这里我们用到了jni.h文件还有创建虚拟机的方法，需要引入jni.h以及libjvm.so库：\n用grep搜索下JNI_CreateJavaVM在哪个库中定义了\n> book@book-desktop:/usr/lib/jvm$ grep \"JNI_CreateJavaVM\" -r .\n> ./java-6-sun/jre/lib/i386/server/libjvm.so matches\n发现在libjvm.so中有定义，所以链接进去。\n> gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm\n除此之外还要在运行时指定libjvm.so  所以将so加入到环境变量中\nLD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server \n完整编译命令是：\n\n```\njavac Hello.java\n//在文件夹下查询  grep \"JNI_CreateJavaVM\" -r .\n//-L指定库路径 -ljvm 把库链接进去  \ngcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm\n//设置环境变量\nLD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server ./caller\n```\n\n最后输出 ：Hello，world！\n\n### 总结： ###\nNative调用Java方法主要就三步，创建虚拟机，加载类，调用方法，这里我们没有考虑方法参数问题，是最简易的demo，如果想进一步学习可以到官网查看文档。\n补充说一点，我们知道Android就是C与Java实现的，所以Android内核启动Java应用层时肯定也使用到C调Java的技术，通过翻看Android的源代码，找到了Zygote进程打开Java世界就有以下代码：\n\n```\nApp_main.cpp:\nruntime.start(\"com.android.internal.os.ZygoteInit\",startSystemServer);\n\nAndroidRuntime.cpp\n...\nif (startVm(&mJavaVM, &env, zygote) != 0) {\n        return;\n}\n...\njclass startClass = env->FindClass(slashClassName);\njmethodID startMeth = env->GetStaticMethodID(startClass, \"main\",\"([Ljava/lang/String;)V\");\nenv->CallStaticVoidMethod(startClass, startMeth, strArray);\n\n```\n这样Android就通过ZygoteInit 的main方法进入Java世界，应用工程师就不用关心底层世界了。\n\n\n\n","slug":"Native层调用Java层方法","published":1,"date":"2018-04-08T07:33:48.060Z","updated":"2018-04-08T07:33:48.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjccce0003qoy8gybs9oj5","content":"<p>接着上一篇，来学习下Native层调用Java层方法。<br>我们都知道，java语言是由虚拟机解释执行的，如果我们想用C语言执行java程序，那么必然要创建一个虚拟机，然后去加载指定的类，如果是静态方法，直接用类调用，如果不是静态的，那么还要创建对象，在调用方法，所以我们大概的罗列下步骤：<br><a id=\"more\"></a></p>\n<ul>\n<li>创建虚拟机</li>\n<li>获得class</li>\n<li>实例化对象<br>&emsp;&emsp;1.对于静态方法，不需要实例化对象<br>&emsp;&emsp;2.实例化对象</li>\n<li>调用Java方法<br>&emsp;&emsp;1.获得方法ID<br>&emsp;&emsp;2.构造参数<br>&emsp;&emsp;3.调用方法</li>\n</ul>\n<p>那么我们该如何创建虚拟机，构造参数等等呢？这就需要查jni文档了，其实我们需要的方法都罗列在jni.h的头文件里了。<br>我们需要用到如下几个方法：JNI_CreateJavaVM、JNIEnv.FindClass、JNIEnv.GetStaticMethodID、JNIEnv.CallStaticVoidMethod<br>从字面上我们很好理解方法的用途，具体的参数类型就要查文档了。<br>查官方文档Creating the Java Virtual Machine这一节，发现如何创建虚拟机，我简化下并抽取成方法create_vm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint create_vm(JavaVM** jvm, JNIEnv** env) &#123;  </span><br><span class=\"line\">    JavaVMInitArgs args;  </span><br><span class=\"line\">    JavaVMOption options[1];  </span><br><span class=\"line\">    args.version = JNI_VERSION_1_6;  </span><br><span class=\"line\">    args.nOptions = 1;  </span><br><span class=\"line\">    options[0].optionString = &quot;-Djava.class.path=./&quot;;  </span><br><span class=\"line\">    args.options = options;  </span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;  </span><br><span class=\"line\">    return JNI_CreateJavaVM(jvm, (void **)env, &amp;args);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在定义一个Hello的java类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Hello &#123;</span><br><span class=\"line\">\tpublic static void main(String args[]) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Hello, world!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建Native类c_call_java.c:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;  </span><br><span class=\"line\">#include &lt;jni.h&gt; </span><br><span class=\"line\">//根据文档，简化一个创建jvm的方法</span><br><span class=\"line\">jint create_vm(JavaVM** jvm, JNIEnv** env) &#123;  </span><br><span class=\"line\">    JavaVMInitArgs args;  </span><br><span class=\"line\">    JavaVMOption options[1];  </span><br><span class=\"line\">    args.version = JNI_VERSION_1_6;  </span><br><span class=\"line\">    args.nOptions = 1;  </span><br><span class=\"line\">    options[0].optionString = &quot;-Djava.class.path=./&quot;;  </span><br><span class=\"line\">    args.options = options;  </span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;  </span><br><span class=\"line\">    return JNI_CreateJavaVM(jvm, (void **)env, &amp;args);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)&#123;</span><br><span class=\"line\">\t/* 定义jvm与env的指针 */</span><br><span class=\"line\">\tJavaVM* jvm;</span><br><span class=\"line\">\tJNIEnv* env;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjclass cls;</span><br><span class=\"line\">\tint ret = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjmethodID mid;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t/* 1. 创建虚拟机 */</span><br><span class=\"line\">\tif (create_vm(&amp;jvm, &amp;env)) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;can not create jvm\\n&quot;);</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t/* 2. 让虚拟机加载Hello类 */</span><br><span class=\"line\">\tcls = (*env)-&gt;FindClass(env, &quot;Hello&quot;);</span><br><span class=\"line\">\tif (cls == NULL) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;can not find hello class\\n&quot;);</span><br><span class=\"line\">\t\tret = -1;</span><br><span class=\"line\">\t\tgoto destroy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 3. 创建Hello对象 */</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 4. 调用方法</span><br><span class=\"line\">\t * 4.1 获取方法id</span><br><span class=\"line\">\t * 4.2 拼装方法参数</span><br><span class=\"line\">\t * 4.3 正在的调用方法</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t//通过方法签名获取方法id，并映射到jmethodID中</span><br><span class=\"line\">\tmid = (*env)-&gt;GetStaticMethodID(env, cls, &quot;main&quot;,&quot;([Ljava/lang/String;)V&quot;);</span><br><span class=\"line\">\tif (mid == NULL) &#123;</span><br><span class=\"line\">\t\tret = -1;</span><br><span class=\"line\">\t\tprintf(&quot;can not get method\\n&quot;);</span><br><span class=\"line\">\t\tgoto destroy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//调用方法</span><br><span class=\"line\">\t(*env)-&gt;CallStaticVoidMethod(env, cls, mid, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">destroy:</span><br><span class=\"line\">\t//销毁jvm</span><br><span class=\"line\">\t(*jvm)-&gt;DestroyJavaVM(jvm);</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了虚拟机，加载了class，然后就可以调用方法了，jni约定了调用方法只需要传递相应的方法签名即可，这个签名封装为jmethodID。<br>例如：”main”,”([Ljava/lang/String;)V”  就是调用参数为String数组，返回值为void的main方法，具体方法与返回值类型该怎么写<br>就要拆看jni的字段描述符  或者用javah来辅助生成方法签名<br><img src=\"https://i.imgur.com/W973V3Z.png\" alt=\"\"><br>在写字段描述符的时候要注意几点：</p>\n<ul>\n<li>用”[“表示数组，比如”int []”表示为”[I”</li>\n<li>对于类，要用全称”L包.子包.类名;”(前面有”L”，后面有”;”)，比如”Ljava/lang/String;”</li>\n<li>除String类外，其他的类都用Object表示，即”Ljava/lang/Object;”</li>\n</ul>\n<p>所以我们Hello.java中的main方法就可以写成这样了 “main”,”([Ljava/lang/String;)V”<br>这里调用的是Hello的主方法，由于是静态的，不需要创建对象，而且不需要传递参数，所以CallStaticVoidMethod的最后一个参数列表为NULL。<br>上传Hello.java c_call_java.c文件,这里我们用到了jni.h文件还有创建虚拟机的方法，需要引入jni.h以及libjvm.so库：<br>用grep搜索下JNI_CreateJavaVM在哪个库中定义了</p>\n<blockquote>\n<p>book@book-desktop:/usr/lib/jvm$ grep “JNI_CreateJavaVM” -r .<br>./java-6-sun/jre/lib/i386/server/libjvm.so matches<br>发现在libjvm.so中有定义，所以链接进去。<br>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm<br>除此之外还要在运行时指定libjvm.so  所以将so加入到环境变量中<br>LD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server<br>完整编译命令是：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Hello.java</span><br><span class=\"line\">//在文件夹下查询  grep &quot;JNI_CreateJavaVM&quot; -r .</span><br><span class=\"line\">//-L指定库路径 -ljvm 把库链接进去  </span><br><span class=\"line\">gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm</span><br><span class=\"line\">//设置环境变量</span><br><span class=\"line\">LD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server ./caller</span><br></pre></td></tr></table></figure>\n<p>最后输出 ：Hello，world！</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>Native调用Java方法主要就三步，创建虚拟机，加载类，调用方法，这里我们没有考虑方法参数问题，是最简易的demo，如果想进一步学习可以到官网查看文档。<br>补充说一点，我们知道Android就是C与Java实现的，所以Android内核启动Java应用层时肯定也使用到C调Java的技术，通过翻看Android的源代码，找到了Zygote进程打开Java世界就有以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App_main.cpp:</span><br><span class=\"line\">runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,startSystemServer);</span><br><span class=\"line\"></span><br><span class=\"line\">AndroidRuntime.cpp</span><br><span class=\"line\">...</span><br><span class=\"line\">if (startVm(&amp;mJavaVM, &amp;env, zygote) != 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class=\"line\">jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,&quot;([Ljava/lang/String;)V&quot;);</span><br><span class=\"line\">env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br></pre></td></tr></table></figure>\n<p>这样Android就通过ZygoteInit 的main方法进入Java世界，应用工程师就不用关心底层世界了。</p>\n","site":{"data":{}},"excerpt":"<p>接着上一篇，来学习下Native层调用Java层方法。<br>我们都知道，java语言是由虚拟机解释执行的，如果我们想用C语言执行java程序，那么必然要创建一个虚拟机，然后去加载指定的类，如果是静态方法，直接用类调用，如果不是静态的，那么还要创建对象，在调用方法，所以我们大概的罗列下步骤：<br>","more":"</p>\n<ul>\n<li>创建虚拟机</li>\n<li>获得class</li>\n<li>实例化对象<br>&emsp;&emsp;1.对于静态方法，不需要实例化对象<br>&emsp;&emsp;2.实例化对象</li>\n<li>调用Java方法<br>&emsp;&emsp;1.获得方法ID<br>&emsp;&emsp;2.构造参数<br>&emsp;&emsp;3.调用方法</li>\n</ul>\n<p>那么我们该如何创建虚拟机，构造参数等等呢？这就需要查jni文档了，其实我们需要的方法都罗列在jni.h的头文件里了。<br>我们需要用到如下几个方法：JNI_CreateJavaVM、JNIEnv.FindClass、JNIEnv.GetStaticMethodID、JNIEnv.CallStaticVoidMethod<br>从字面上我们很好理解方法的用途，具体的参数类型就要查文档了。<br>查官方文档Creating the Java Virtual Machine这一节，发现如何创建虚拟机，我简化下并抽取成方法create_vm：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint create_vm(JavaVM** jvm, JNIEnv** env) &#123;  </span><br><span class=\"line\">    JavaVMInitArgs args;  </span><br><span class=\"line\">    JavaVMOption options[1];  </span><br><span class=\"line\">    args.version = JNI_VERSION_1_6;  </span><br><span class=\"line\">    args.nOptions = 1;  </span><br><span class=\"line\">    options[0].optionString = &quot;-Djava.class.path=./&quot;;  </span><br><span class=\"line\">    args.options = options;  </span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;  </span><br><span class=\"line\">    return JNI_CreateJavaVM(jvm, (void **)env, &amp;args);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在定义一个Hello的java类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Hello &#123;</span><br><span class=\"line\">\tpublic static void main(String args[]) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Hello, world!&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建Native类c_call_java.c:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;  </span><br><span class=\"line\">#include &lt;jni.h&gt; </span><br><span class=\"line\">//根据文档，简化一个创建jvm的方法</span><br><span class=\"line\">jint create_vm(JavaVM** jvm, JNIEnv** env) &#123;  </span><br><span class=\"line\">    JavaVMInitArgs args;  </span><br><span class=\"line\">    JavaVMOption options[1];  </span><br><span class=\"line\">    args.version = JNI_VERSION_1_6;  </span><br><span class=\"line\">    args.nOptions = 1;  </span><br><span class=\"line\">    options[0].optionString = &quot;-Djava.class.path=./&quot;;  </span><br><span class=\"line\">    args.options = options;  </span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;  </span><br><span class=\"line\">    return JNI_CreateJavaVM(jvm, (void **)env, &amp;args);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)&#123;</span><br><span class=\"line\">\t/* 定义jvm与env的指针 */</span><br><span class=\"line\">\tJavaVM* jvm;</span><br><span class=\"line\">\tJNIEnv* env;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjclass cls;</span><br><span class=\"line\">\tint ret = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tjmethodID mid;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t/* 1. 创建虚拟机 */</span><br><span class=\"line\">\tif (create_vm(&amp;jvm, &amp;env)) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;can not create jvm\\n&quot;);</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t/* 2. 让虚拟机加载Hello类 */</span><br><span class=\"line\">\tcls = (*env)-&gt;FindClass(env, &quot;Hello&quot;);</span><br><span class=\"line\">\tif (cls == NULL) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;can not find hello class\\n&quot;);</span><br><span class=\"line\">\t\tret = -1;</span><br><span class=\"line\">\t\tgoto destroy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 3. 创建Hello对象 */</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* 4. 调用方法</span><br><span class=\"line\">\t * 4.1 获取方法id</span><br><span class=\"line\">\t * 4.2 拼装方法参数</span><br><span class=\"line\">\t * 4.3 正在的调用方法</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t//通过方法签名获取方法id，并映射到jmethodID中</span><br><span class=\"line\">\tmid = (*env)-&gt;GetStaticMethodID(env, cls, &quot;main&quot;,&quot;([Ljava/lang/String;)V&quot;);</span><br><span class=\"line\">\tif (mid == NULL) &#123;</span><br><span class=\"line\">\t\tret = -1;</span><br><span class=\"line\">\t\tprintf(&quot;can not get method\\n&quot;);</span><br><span class=\"line\">\t\tgoto destroy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//调用方法</span><br><span class=\"line\">\t(*env)-&gt;CallStaticVoidMethod(env, cls, mid, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">destroy:</span><br><span class=\"line\">\t//销毁jvm</span><br><span class=\"line\">\t(*jvm)-&gt;DestroyJavaVM(jvm);</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了虚拟机，加载了class，然后就可以调用方法了，jni约定了调用方法只需要传递相应的方法签名即可，这个签名封装为jmethodID。<br>例如：”main”,”([Ljava/lang/String;)V”  就是调用参数为String数组，返回值为void的main方法，具体方法与返回值类型该怎么写<br>就要拆看jni的字段描述符  或者用javah来辅助生成方法签名<br><img src=\"https://i.imgur.com/W973V3Z.png\" alt=\"\"><br>在写字段描述符的时候要注意几点：</p>\n<ul>\n<li>用”[“表示数组，比如”int []”表示为”[I”</li>\n<li>对于类，要用全称”L包.子包.类名;”(前面有”L”，后面有”;”)，比如”Ljava/lang/String;”</li>\n<li>除String类外，其他的类都用Object表示，即”Ljava/lang/Object;”</li>\n</ul>\n<p>所以我们Hello.java中的main方法就可以写成这样了 “main”,”([Ljava/lang/String;)V”<br>这里调用的是Hello的主方法，由于是静态的，不需要创建对象，而且不需要传递参数，所以CallStaticVoidMethod的最后一个参数列表为NULL。<br>上传Hello.java c_call_java.c文件,这里我们用到了jni.h文件还有创建虚拟机的方法，需要引入jni.h以及libjvm.so库：<br>用grep搜索下JNI_CreateJavaVM在哪个库中定义了</p>\n<blockquote>\n<p>book@book-desktop:/usr/lib/jvm$ grep “JNI_CreateJavaVM” -r .<br>./java-6-sun/jre/lib/i386/server/libjvm.so matches<br>发现在libjvm.so中有定义，所以链接进去。<br>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm<br>除此之外还要在运行时指定libjvm.so  所以将so加入到环境变量中<br>LD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server<br>完整编译命令是：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac Hello.java</span><br><span class=\"line\">//在文件夹下查询  grep &quot;JNI_CreateJavaVM&quot; -r .</span><br><span class=\"line\">//-L指定库路径 -ljvm 把库链接进去  </span><br><span class=\"line\">gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -o caller c_call_java.c -L /usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server -ljvm</span><br><span class=\"line\">//设置环境变量</span><br><span class=\"line\">LD_LIBRARY_PATH=/usr/lib/jvm/java-1.6.0-openjdk/jre/lib/i386/server ./caller</span><br></pre></td></tr></table></figure>\n<p>最后输出 ：Hello，world！</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>Native调用Java方法主要就三步，创建虚拟机，加载类，调用方法，这里我们没有考虑方法参数问题，是最简易的demo，如果想进一步学习可以到官网查看文档。<br>补充说一点，我们知道Android就是C与Java实现的，所以Android内核启动Java应用层时肯定也使用到C调Java的技术，通过翻看Android的源代码，找到了Zygote进程打开Java世界就有以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App_main.cpp:</span><br><span class=\"line\">runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,startSystemServer);</span><br><span class=\"line\"></span><br><span class=\"line\">AndroidRuntime.cpp</span><br><span class=\"line\">...</span><br><span class=\"line\">if (startVm(&amp;mJavaVM, &amp;env, zygote) != 0) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class=\"line\">jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, &quot;main&quot;,&quot;([Ljava/lang/String;)V&quot;);</span><br><span class=\"line\">env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br></pre></td></tr></table></figure>\n<p>这样Android就通过ZygoteInit 的main方法进入Java世界，应用工程师就不用关心底层世界了。</p>"},{"title":"从零学自动化测试之appium环境(一)","_content":"### 说在前面 ###\n\n最近与团队的小伙伴们密谋了一场：从零学自动化测试课程。今天主讲appium，发现很多人还停留在环境这步。小伙伴们强烈要求写文档，所以本篇是课堂记录也是安装文档，希望能满足有需要的小伙伴。\n<!-- more -->\n### 需要准备的材料 ###\n- java环境（相关教程非常多，这里就不赘述了）\n- android环境\n- node环境\n- appium-doctor\n\n### android环境 ###\nandroid环境最麻烦的就是sdk了，我建议大家直接下载android studio,安装时会默认下载sdk。反正以后也要分析appium-uiautomator2-server工程，都得用studio，所以这里我们用这种方式安装。如果不想安装studio，可以下载*仅获取命令行工具*[单独的sdk](https://developer.android.com/studio/index.html?hl=zh-cn)但是需要科学上网,然后通过sdk manager命令行下载。\n\n下载完成后我们需要配置ANDROID_HOME系统变量，不需要加入到path中。\n\n### node环境 ###\n\n简单说下，appium是基于node平台的express框架开发的，官方建议我们使用node方式管理appim，这样能够通过代码很方便的控制appium，而且方便收集日志。但是要求node版本要大于6，从appium的源码config.js可以看到：\n```\nfunction checkNodeOk () {\n  let [major, minor] = getNodeVersion();\n  if (major < 6) {\n    let msg = `Node version must be >= 6. Currently ${major}.${minor}`;\n    logger.errorAndThrow(msg);\n  }\n}\n```\n这里我们安装的是8.9.4，具体安装过程不再赘述.\n安装完成后执行node -v:\n>C:\\Users\\zhang>node -v\nv8.9.4\nC:\\Users\\zhang>\n\nnpm是node平台默认的模块管理工具，但是由于国内网络环境问题，导致npm安装模块是龟速，建议大家使用[cnpm镜像](https://npm.taobao.org/)来安装各种模块。我们先用执行npm命令看看效果：\n>C:\\Users\\zhang>npm\n>Usage: npm &lt;command&gt;\n\n这样就说明npm已经安装了，接下来使用npm安装cnpm模块,执行命令如下：\n> npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n安装完成后我们执行cnpm命令：\n>C:\\Users\\zhang>cnpm\nUsage: cnpm [option] <command>\nHelp: http://cnpmjs.org/help/cnpm\n\n这样我们的node环境搭建完毕，以后可以通过cnpm代替npm命令了。\n\n### appium-doctor ###\nappium-doctor是appium提供的一个检查appium环境的模块，也托管在npm上，所以我们通过cnpm下载：\n> cnpm install -g appium-doctor\n\n这里要简单说下 -g 的作用，-g是全局安装（global）的意思 如果不添加-g则是本地安装。两者的区别是**全局安装可以直接在命令行里使用**。\n\n安装appium-doctor完成后我们使用appium-doctor --dev来查看还差哪些appium需要的环境：\n> appium-doctor --dev\n\n![](https://i.imgur.com/Djb5p2O.png)\n\n目前显示我的adb已经有了但是还没有加入到path中，maven与ant还没有安装，android-16与19都没有(在sdk\\platforms中查看)，我这只有android-25，为了方便以后使用adb，建议将adb添加到path中\n\n这里有几点要说：\n- adb 是appium操作app的工具，必须要有的\n- maven与ant是我们打jar包需要的工具，我猜测应该是打bootstrap.jar使用的\n- android-16是用来兼容低版本的，\n- android-19是使用uiautomator2的\n- ** 如果我们不打算编译appium源码，也不打算兼容19以下的版本，我们可以不安装android-16跟android-19的版本 以及maven、ant环境 **\n\n### 开始安装appium ###\n现在我们尝试用cnpm安装appium试试：\n> cnpm install -g appium\n\n** 需要注意 **如果下载过程有中断最好先使用npm(不是用cnpm) uninstall -g appium卸载原有模块然后从新执行cnpm install -g appium .如果网络比较好几分钟就安装完成，我这大概有十分钟安装完成。\n安装完成后执行appium命令，如果出现以下内容则安装成功：\n>C:\\Users\\zhang>appium\n[Appium] Welcome to Appium v1.7.2\n[Appium] Appium REST http interface listener started on 0.0.0.0:4723\n\n如果想编译appium源码并调试请移步[appium源码编译](http://www.kikijie.com/2018/03/12/appium%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/#more)\n\n----\n\n补充说明：如果出现如下错误，则不必担心，并不影响安装：\n\n```\nMSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；2) 安装 Microsoft Visual Stu\ndio 2005；或 3) 如果将该组件安装到了其他位置，请将其位置添加到系统路径中。 [C:\\Users\\zhang\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\_heapd\nump@0.3.9@heapdump\\build\\binding.sln]\n```\n\n\n\n\n\n\n","source":"_posts/从零学自动化测试之appium环境(一).md","raw":"---\ntitle: 从零学自动化测试之appium环境(一)\ncategories:\n- 从零学自动化测试\ntags:\n- appium\n\n---\n### 说在前面 ###\n\n最近与团队的小伙伴们密谋了一场：从零学自动化测试课程。今天主讲appium，发现很多人还停留在环境这步。小伙伴们强烈要求写文档，所以本篇是课堂记录也是安装文档，希望能满足有需要的小伙伴。\n<!-- more -->\n### 需要准备的材料 ###\n- java环境（相关教程非常多，这里就不赘述了）\n- android环境\n- node环境\n- appium-doctor\n\n### android环境 ###\nandroid环境最麻烦的就是sdk了，我建议大家直接下载android studio,安装时会默认下载sdk。反正以后也要分析appium-uiautomator2-server工程，都得用studio，所以这里我们用这种方式安装。如果不想安装studio，可以下载*仅获取命令行工具*[单独的sdk](https://developer.android.com/studio/index.html?hl=zh-cn)但是需要科学上网,然后通过sdk manager命令行下载。\n\n下载完成后我们需要配置ANDROID_HOME系统变量，不需要加入到path中。\n\n### node环境 ###\n\n简单说下，appium是基于node平台的express框架开发的，官方建议我们使用node方式管理appim，这样能够通过代码很方便的控制appium，而且方便收集日志。但是要求node版本要大于6，从appium的源码config.js可以看到：\n```\nfunction checkNodeOk () {\n  let [major, minor] = getNodeVersion();\n  if (major < 6) {\n    let msg = `Node version must be >= 6. Currently ${major}.${minor}`;\n    logger.errorAndThrow(msg);\n  }\n}\n```\n这里我们安装的是8.9.4，具体安装过程不再赘述.\n安装完成后执行node -v:\n>C:\\Users\\zhang>node -v\nv8.9.4\nC:\\Users\\zhang>\n\nnpm是node平台默认的模块管理工具，但是由于国内网络环境问题，导致npm安装模块是龟速，建议大家使用[cnpm镜像](https://npm.taobao.org/)来安装各种模块。我们先用执行npm命令看看效果：\n>C:\\Users\\zhang>npm\n>Usage: npm &lt;command&gt;\n\n这样就说明npm已经安装了，接下来使用npm安装cnpm模块,执行命令如下：\n> npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n安装完成后我们执行cnpm命令：\n>C:\\Users\\zhang>cnpm\nUsage: cnpm [option] <command>\nHelp: http://cnpmjs.org/help/cnpm\n\n这样我们的node环境搭建完毕，以后可以通过cnpm代替npm命令了。\n\n### appium-doctor ###\nappium-doctor是appium提供的一个检查appium环境的模块，也托管在npm上，所以我们通过cnpm下载：\n> cnpm install -g appium-doctor\n\n这里要简单说下 -g 的作用，-g是全局安装（global）的意思 如果不添加-g则是本地安装。两者的区别是**全局安装可以直接在命令行里使用**。\n\n安装appium-doctor完成后我们使用appium-doctor --dev来查看还差哪些appium需要的环境：\n> appium-doctor --dev\n\n![](https://i.imgur.com/Djb5p2O.png)\n\n目前显示我的adb已经有了但是还没有加入到path中，maven与ant还没有安装，android-16与19都没有(在sdk\\platforms中查看)，我这只有android-25，为了方便以后使用adb，建议将adb添加到path中\n\n这里有几点要说：\n- adb 是appium操作app的工具，必须要有的\n- maven与ant是我们打jar包需要的工具，我猜测应该是打bootstrap.jar使用的\n- android-16是用来兼容低版本的，\n- android-19是使用uiautomator2的\n- ** 如果我们不打算编译appium源码，也不打算兼容19以下的版本，我们可以不安装android-16跟android-19的版本 以及maven、ant环境 **\n\n### 开始安装appium ###\n现在我们尝试用cnpm安装appium试试：\n> cnpm install -g appium\n\n** 需要注意 **如果下载过程有中断最好先使用npm(不是用cnpm) uninstall -g appium卸载原有模块然后从新执行cnpm install -g appium .如果网络比较好几分钟就安装完成，我这大概有十分钟安装完成。\n安装完成后执行appium命令，如果出现以下内容则安装成功：\n>C:\\Users\\zhang>appium\n[Appium] Welcome to Appium v1.7.2\n[Appium] Appium REST http interface listener started on 0.0.0.0:4723\n\n如果想编译appium源码并调试请移步[appium源码编译](http://www.kikijie.com/2018/03/12/appium%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/#more)\n\n----\n\n补充说明：如果出现如下错误，则不必担心，并不影响安装：\n\n```\nMSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；2) 安装 Microsoft Visual Stu\ndio 2005；或 3) 如果将该组件安装到了其他位置，请将其位置添加到系统路径中。 [C:\\Users\\zhang\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\_heapd\nump@0.3.9@heapdump\\build\\binding.sln]\n```\n\n\n\n\n\n\n","slug":"从零学自动化测试之appium环境(一)","published":1,"date":"2018-03-19T08:09:22.070Z","updated":"2018-03-19T08:09:22.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjcccm0007qoy82ooj1s6j","content":"<h3 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h3><p>最近与团队的小伙伴们密谋了一场：从零学自动化测试课程。今天主讲appium，发现很多人还停留在环境这步。小伙伴们强烈要求写文档，所以本篇是课堂记录也是安装文档，希望能满足有需要的小伙伴。<br><a id=\"more\"></a></p>\n<h3 id=\"需要准备的材料\"><a href=\"#需要准备的材料\" class=\"headerlink\" title=\"需要准备的材料\"></a>需要准备的材料</h3><ul>\n<li>java环境（相关教程非常多，这里就不赘述了）</li>\n<li>android环境</li>\n<li>node环境</li>\n<li>appium-doctor</li>\n</ul>\n<h3 id=\"android环境\"><a href=\"#android环境\" class=\"headerlink\" title=\"android环境\"></a>android环境</h3><p>android环境最麻烦的就是sdk了，我建议大家直接下载android studio,安装时会默认下载sdk。反正以后也要分析appium-uiautomator2-server工程，都得用studio，所以这里我们用这种方式安装。如果不想安装studio，可以下载<em>仅获取命令行工具</em><a href=\"https://developer.android.com/studio/index.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">单独的sdk</a>但是需要科学上网,然后通过sdk manager命令行下载。</p>\n<p>下载完成后我们需要配置ANDROID_HOME系统变量，不需要加入到path中。</p>\n<h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><p>简单说下，appium是基于node平台的express框架开发的，官方建议我们使用node方式管理appim，这样能够通过代码很方便的控制appium，而且方便收集日志。但是要求node版本要大于6，从appium的源码config.js可以看到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkNodeOk () &#123;</span><br><span class=\"line\">  let [major, minor] = getNodeVersion();</span><br><span class=\"line\">  if (major &lt; 6) &#123;</span><br><span class=\"line\">    let msg = `Node version must be &gt;= 6. Currently $&#123;major&#125;.$&#123;minor&#125;`;</span><br><span class=\"line\">    logger.errorAndThrow(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们安装的是8.9.4，具体安装过程不再赘述.<br>安装完成后执行node -v:</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;node -v<br>v8.9.4<br>C:\\Users\\zhang&gt;</p>\n</blockquote>\n<p>npm是node平台默认的模块管理工具，但是由于国内网络环境问题，导致npm安装模块是龟速，建议大家使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm镜像</a>来安装各种模块。我们先用执行npm命令看看效果：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;npm<br>Usage: npm &lt;command&gt;</p>\n</blockquote>\n<p>这样就说明npm已经安装了，接下来使用npm安装cnpm模块,执行命令如下：</p>\n<blockquote>\n<p>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<p>安装完成后我们执行cnpm命令：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;cnpm<br>Usage: cnpm [option] <command><br>Help: <a href=\"http://cnpmjs.org/help/cnpm\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/help/cnpm</a></p>\n</blockquote>\n<p>这样我们的node环境搭建完毕，以后可以通过cnpm代替npm命令了。</p>\n<h3 id=\"appium-doctor\"><a href=\"#appium-doctor\" class=\"headerlink\" title=\"appium-doctor\"></a>appium-doctor</h3><p>appium-doctor是appium提供的一个检查appium环境的模块，也托管在npm上，所以我们通过cnpm下载：</p>\n<blockquote>\n<p>cnpm install -g appium-doctor</p>\n</blockquote>\n<p>这里要简单说下 -g 的作用，-g是全局安装（global）的意思 如果不添加-g则是本地安装。两者的区别是<strong>全局安装可以直接在命令行里使用</strong>。</p>\n<p>安装appium-doctor完成后我们使用appium-doctor –dev来查看还差哪些appium需要的环境：</p>\n<blockquote>\n<p>appium-doctor –dev</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Djb5p2O.png\" alt=\"\"></p>\n<p>目前显示我的adb已经有了但是还没有加入到path中，maven与ant还没有安装，android-16与19都没有(在sdk\\platforms中查看)，我这只有android-25，为了方便以后使用adb，建议将adb添加到path中</p>\n<p>这里有几点要说：</p>\n<ul>\n<li>adb 是appium操作app的工具，必须要有的</li>\n<li>maven与ant是我们打jar包需要的工具，我猜测应该是打bootstrap.jar使用的</li>\n<li>android-16是用来兼容低版本的，</li>\n<li>android-19是使用uiautomator2的</li>\n<li><strong> 如果我们不打算编译appium源码，也不打算兼容19以下的版本，我们可以不安装android-16跟android-19的版本 以及maven、ant环境 </strong></li>\n</ul>\n<h3 id=\"开始安装appium\"><a href=\"#开始安装appium\" class=\"headerlink\" title=\"开始安装appium\"></a>开始安装appium</h3><p>现在我们尝试用cnpm安装appium试试：</p>\n<blockquote>\n<p>cnpm install -g appium</p>\n</blockquote>\n<p><strong> 需要注意 </strong>如果下载过程有中断最好先使用npm(不是用cnpm) uninstall -g appium卸载原有模块然后从新执行cnpm install -g appium .如果网络比较好几分钟就安装完成，我这大概有十分钟安装完成。<br>安装完成后执行appium命令，如果出现以下内容则安装成功：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;appium<br>[Appium] Welcome to Appium v1.7.2<br>[Appium] Appium REST http interface listener started on 0.0.0.0:4723</p>\n</blockquote>\n<p>如果想编译appium源码并调试请移步<a href=\"http://www.kikijie.com/2018/03/12/appium%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/#more\" target=\"_blank\" rel=\"noopener\">appium源码编译</a></p>\n<hr>\n<p>补充说明：如果出现如下错误，则不必担心，并不影响安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；2) 安装 Microsoft Visual Stu</span><br><span class=\"line\">dio 2005；或 3) 如果将该组件安装到了其他位置，请将其位置添加到系统路径中。 [C:\\Users\\zhang\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\_heapd</span><br><span class=\"line\">ump@0.3.9@heapdump\\build\\binding.sln]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h3><p>最近与团队的小伙伴们密谋了一场：从零学自动化测试课程。今天主讲appium，发现很多人还停留在环境这步。小伙伴们强烈要求写文档，所以本篇是课堂记录也是安装文档，希望能满足有需要的小伙伴。<br>","more":"</p>\n<h3 id=\"需要准备的材料\"><a href=\"#需要准备的材料\" class=\"headerlink\" title=\"需要准备的材料\"></a>需要准备的材料</h3><ul>\n<li>java环境（相关教程非常多，这里就不赘述了）</li>\n<li>android环境</li>\n<li>node环境</li>\n<li>appium-doctor</li>\n</ul>\n<h3 id=\"android环境\"><a href=\"#android环境\" class=\"headerlink\" title=\"android环境\"></a>android环境</h3><p>android环境最麻烦的就是sdk了，我建议大家直接下载android studio,安装时会默认下载sdk。反正以后也要分析appium-uiautomator2-server工程，都得用studio，所以这里我们用这种方式安装。如果不想安装studio，可以下载<em>仅获取命令行工具</em><a href=\"https://developer.android.com/studio/index.html?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">单独的sdk</a>但是需要科学上网,然后通过sdk manager命令行下载。</p>\n<p>下载完成后我们需要配置ANDROID_HOME系统变量，不需要加入到path中。</p>\n<h3 id=\"node环境\"><a href=\"#node环境\" class=\"headerlink\" title=\"node环境\"></a>node环境</h3><p>简单说下，appium是基于node平台的express框架开发的，官方建议我们使用node方式管理appim，这样能够通过代码很方便的控制appium，而且方便收集日志。但是要求node版本要大于6，从appium的源码config.js可以看到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkNodeOk () &#123;</span><br><span class=\"line\">  let [major, minor] = getNodeVersion();</span><br><span class=\"line\">  if (major &lt; 6) &#123;</span><br><span class=\"line\">    let msg = `Node version must be &gt;= 6. Currently $&#123;major&#125;.$&#123;minor&#125;`;</span><br><span class=\"line\">    logger.errorAndThrow(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里我们安装的是8.9.4，具体安装过程不再赘述.<br>安装完成后执行node -v:</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;node -v<br>v8.9.4<br>C:\\Users\\zhang&gt;</p>\n</blockquote>\n<p>npm是node平台默认的模块管理工具，但是由于国内网络环境问题，导致npm安装模块是龟速，建议大家使用<a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm镜像</a>来安装各种模块。我们先用执行npm命令看看效果：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;npm<br>Usage: npm &lt;command&gt;</p>\n</blockquote>\n<p>这样就说明npm已经安装了，接下来使用npm安装cnpm模块,执行命令如下：</p>\n<blockquote>\n<p>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<p>安装完成后我们执行cnpm命令：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;cnpm<br>Usage: cnpm [option] <command><br>Help: <a href=\"http://cnpmjs.org/help/cnpm\" target=\"_blank\" rel=\"noopener\">http://cnpmjs.org/help/cnpm</a></p>\n</blockquote>\n<p>这样我们的node环境搭建完毕，以后可以通过cnpm代替npm命令了。</p>\n<h3 id=\"appium-doctor\"><a href=\"#appium-doctor\" class=\"headerlink\" title=\"appium-doctor\"></a>appium-doctor</h3><p>appium-doctor是appium提供的一个检查appium环境的模块，也托管在npm上，所以我们通过cnpm下载：</p>\n<blockquote>\n<p>cnpm install -g appium-doctor</p>\n</blockquote>\n<p>这里要简单说下 -g 的作用，-g是全局安装（global）的意思 如果不添加-g则是本地安装。两者的区别是<strong>全局安装可以直接在命令行里使用</strong>。</p>\n<p>安装appium-doctor完成后我们使用appium-doctor –dev来查看还差哪些appium需要的环境：</p>\n<blockquote>\n<p>appium-doctor –dev</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/Djb5p2O.png\" alt=\"\"></p>\n<p>目前显示我的adb已经有了但是还没有加入到path中，maven与ant还没有安装，android-16与19都没有(在sdk\\platforms中查看)，我这只有android-25，为了方便以后使用adb，建议将adb添加到path中</p>\n<p>这里有几点要说：</p>\n<ul>\n<li>adb 是appium操作app的工具，必须要有的</li>\n<li>maven与ant是我们打jar包需要的工具，我猜测应该是打bootstrap.jar使用的</li>\n<li>android-16是用来兼容低版本的，</li>\n<li>android-19是使用uiautomator2的</li>\n<li><strong> 如果我们不打算编译appium源码，也不打算兼容19以下的版本，我们可以不安装android-16跟android-19的版本 以及maven、ant环境 </strong></li>\n</ul>\n<h3 id=\"开始安装appium\"><a href=\"#开始安装appium\" class=\"headerlink\" title=\"开始安装appium\"></a>开始安装appium</h3><p>现在我们尝试用cnpm安装appium试试：</p>\n<blockquote>\n<p>cnpm install -g appium</p>\n</blockquote>\n<p><strong> 需要注意 </strong>如果下载过程有中断最好先使用npm(不是用cnpm) uninstall -g appium卸载原有模块然后从新执行cnpm install -g appium .如果网络比较好几分钟就安装完成，我这大概有十分钟安装完成。<br>安装完成后执行appium命令，如果出现以下内容则安装成功：</p>\n<blockquote>\n<p>C:\\Users\\zhang&gt;appium<br>[Appium] Welcome to Appium v1.7.2<br>[Appium] Appium REST http interface listener started on 0.0.0.0:4723</p>\n</blockquote>\n<p>如果想编译appium源码并调试请移步<a href=\"http://www.kikijie.com/2018/03/12/appium%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/#more\" target=\"_blank\" rel=\"noopener\">appium源码编译</a></p>\n<hr>\n<p>补充说明：如果出现如下错误，则不必担心，并不影响安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；2) 安装 Microsoft Visual Stu</span><br><span class=\"line\">dio 2005；或 3) 如果将该组件安装到了其他位置，请将其位置添加到系统路径中。 [C:\\Users\\zhang\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\_heapd</span><br><span class=\"line\">ump@0.3.9@heapdump\\build\\binding.sln]</span><br></pre></td></tr></table></figure>"},{"title":"从零学自动化测试之一文学会junit4(二)","_content":"### 说在前面 ###\n\n使用java语言做测试开发的同学，必须要掌握一项测试框架，可能是junit、testng、spock,这里我们选择junit4上手，虽然2016年junit5已经问世，但是还不是主流，testng适合复杂场景测试，spock不时候入门学习。\n这里的内容主要源于[官网](https://junit.org/junit4/)\n<!-- more -->\n\n### 准备环境 ###\n这里我们使用intellij idea 新建一个gradle的java工程，新工程会默认使用junit4作为测试框架。\n\n### 创建第一个用例 ###\n\n我们使用intellij idea 创建被测试类，这个类主要是用来计算+法语句：\n\n```\npublic class Calculator {\n  public int evaluate(String expression) {\n    int sum = 0;\n    for (String summand: expression.split(\"\\\\+\"))\n      sum += Integer.valueOf(summand);\n    return sum;\n  }\n}\n```\n创建测试类:\n```\npublic class CalculatorTest {\n  @Test\n  public void evaluatesExpression() {\n    Calculator calculator = new Calculator();\n    int sum = calculator.evaluate(\"1+2+3\");\n    assertEquals(6, sum);\n  }\n}\n```\njunit4创建测试类只需要使用@Test注解标注即可，不像junit3还得继承TestCase，方法名还有限制等等。\n右键执行输出：\n\n```\nJUnit version 4.12\n.\nTime: 0,006\n\nOK (1 test)\n```\n\n### 常用注解 ###\n\n|注解|用途|\n|--|--|\n|@Test|定义一个测试方法|\n|@BeforeClass|所有的测试方法前被执行，public static修饰，且只执行一次|\n|@AfterClass|所有的测试方法后被执行，public static修饰，且只执行一次|\n|@Before|每一个测试方法前被执行一次|\n|@After|每一个测试方法后被执行一次|\n|@Ignore|忽略|\n|@RunWith|修改运行器|\n|@Rule|使用规则|\n\n```\npublic class TestFixturesExample {\n  static class ExpensiveManagedResource implements Closeable {\n    @Override\n    public void close() throws IOException {}\n  }\n\n  static class ManagedResource implements Closeable {\n    @Override\n    public void close() throws IOException {}\n  }\n\n  @BeforeClass\n  public static void setUpClass() {\n    System.out.println(\"@BeforeClass setUpClass\");\n    myExpensiveManagedResource = new ExpensiveManagedResource();\n  }\n\n  @AfterClass\n  public static void tearDownClass() throws IOException {\n    System.out.println(\"@AfterClass tearDownClass\");\n    myExpensiveManagedResource.close();\n    myExpensiveManagedResource = null;\n  }\n\n  private ManagedResource myManagedResource;\n  private static ExpensiveManagedResource myExpensiveManagedResource;\n\n  private void println(String string) {\n    System.out.println(string);\n  }\n\n  @Before\n  public void setUp() {\n    this.println(\"@Before setUp\");\n    this.myManagedResource = new ManagedResource();\n  }\n\n  @After\n  public void tearDown() throws IOException {\n    this.println(\"@After tearDown\");\n    this.myManagedResource.close();\n    this.myManagedResource = null;\n  }\n\n  @Test\n  public void test1() {\n    this.println(\"@Test test1()\");\n  }\n\n  @Test\n  public void test2() {\n    this.println(\"@Test test2()\");\n  }\n}\n```\n输出：\n\n> @BeforeClass setUpClass\n@Before setUp\n@Test test2()\n@After tearDown\n@Before setUp\n@Test test1()\n@After tearDown\n@AfterClass tearDownClass\n\n\n### Junit4断言 ###\njunit4底层使用了org.hamcrest这个断言框架，除此之外自己也封装了一些断言方式，在org.junit.Asert中，\n这里就简单列几个：\n\n|方法|描述|\n| -- | -- |\n|assertTrue(String message, boolean condition)|检查条件是否为真|\n|assertFalse(String message, boolean condition)|检查条件是否为假|\n|assertEquals(String message, Object expected,Object actual)|检查是否相等|\n|assertNotNull(String message, Object object)|检查对象是否不为空|\n|assertSame(String message, Object expected, Object actual)|检查两个对象引用是否引用同一对象（即对象是否相等）|\n\n使用的使用通过静态导入非常方便：\n\n```\nimport static org.junit.Assert.*;\npublic class AssertionsTest {  \n    @Test  \n    public void testAssertNull() {  \n        String str = null;  \n        assertNull(str);  \n    }  \n}\n```\n除此之外，junit4包装了hamcrest的assertThat，方便各种断言,例如我们想断言接口返回字符串中是否包含\"color\"或者\"colour\"\n\n```\nassertTrue(responseString.contains(\"color\") || responseString.contains(\"colour\"));\n// ==> failure message: \n// java.lang.AssertionError:\n\n\nassertThat(responseString, anyOf(containsString(\"color\"), containsString(\"colour\")));\n// ==> failure message:\n// java.lang.AssertionError: \n// Expected: (a string containing \"color\" or a string containing \"colour\")\n//      got: \"Please choose a font\"\n```\n\n### junit4运行器 ###\njunit4中的所有测试方法都是通过测试运行器执行的，junit4默认使用BlockJUnit4ClassRunner，但是我们可以通过@RunWith注解指定运行器来达到不同的运行器，例如使用系统默认的Suite这个套件运行器可以运行多个类中的测试方法：\n\n```\n@RunWith(Suite.class)\n @SuiteClasses({ATest.class, BTest.class, CTest.class})\n public class ABCSuite {\n }\n```\nsuite运行器会反射将SuiteClasses值中的类封装成runners供系统调用，这里我们使用的是intellij，则由intellij的runner调用。这样就达到了套件测试。\n\n其实也可以自定义规则，只需要继承ParentRunner或BlockJUnit4ClassRunner即可\n例如Spring Framework中的SpringJUnit4ClassRunner ，Mockito中的MockitoJUnitRunner，Cucumber框架中的Cucumber Runner等等\n这里我们看看cucumber自定义的runner.\n\n```\npublic class Cucumber extends ParentRunner<FeatureRunner> {\n}\n```\n使用时类似suite.\n\n```\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features= {\"classpath:features\"},\n        glue= {\"com.htest.core.steps\",\"com.htest.hjservice.steps\"},\n        tags= {\"@service\"},\n        plugin = {\"json:build/result.json\"}\n)\npublic class StartTestCase {\n}\n```\n\n这里的CucumberOptions注解是Cucumber运行器所需要的参数配置。\n\n### 执行测试顺序 ###\n在一个测试类中如果哟多个测试方法例如有testA(),testB(),testC()，那么junit4是以什么顺序执行呢？如果在testng中我们可以通过dependsOnMethods来管理测试方法的顺序。\n而junit4默认是通过方法名的字符串比较升序排序的。\n\n```\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestMethodOrder {\n    @Test\n    public void testA() {\n        System.out.println(\"first\");\n    }\n    @Test\n    public void testB() {\n        System.out.println(\"second\");\n    }\n    @Test\n    public void testC() {\n        System.out.println(\"third\");\n    }\n}\n```\n### 异常测试 ###\n当我们想验证一段代码是否抛出期望的异常时，就会用到异常测试，异常测试的使用时通过expected指定异常类：\n\n```\n@Test(expected = IndexOutOfBoundsException.class) \npublic void empty() { \n     new ArrayList<Object>().get(0); \n}\n```\n除此之外我们可以通过@Rule，设定异常规则，这里我们只需要知道@Rule会提供一个切入点，在测试方法前后或中执行被@Rule标记的类逻辑。后面会再次介绍。\n\n```\n public static class ThrowExceptionWithExpectedType {\n        @Rule\n        public ExpectedException thrown = none();\n\n        @Test\n        public void throwsNullPointerException1() {\n            thrown.expect(NullPointerException.class);\n            throw new NullPointerException();\n        }\n\n        @Test\n        public void throwsNullPointerException2() {\n            thrown.expect(NullPointerException.class);\n        }\n    }\n```\n### 忽略测试 ###\n \n忽略测试被用来禁止执行junit测试类的某些或者全部测试方法。使用时只需要将@Ignore添加在类或者方法上即可\n\n```\n@Ignore(\"For a good reason\")\npublic class IgnoreMe {\n        @Test\n        public void iFail() {\n            fail();\n        }\n\n        @Test\n        public void iFailToo() {\n            fail();\n        }\n\n        @Ignore\n        @Test\n        public void test() throws Exception {\n            fail(\"test() should not run\");\n        }\n    }\n```\n\n### 超时测试 ###\n junit4使用@Timeout注解来测试任意特定方法的执行时间。如果测试方法的执行时间大于指定的超时参数，测试方法将抛出异常，测试结果为失败，指定的超时参数单位为毫秒\n\n```\n@Test(timeout=1000)\npublic void testWithTimeout() {\n  ...\n}\n```\ntimeout超时测试的实现是通过创建一个守护线程来执行该测试方法的。同样我们也可以使用@Rule来创建超时规则:\n\n```\npublic class HasGlobalTimeout {\n    public static String log;\n    @Rule\n    public Timeout globalTimeout = Timeout.seconds(10); // 10 seconds max per method tested\n\n    @Test\n    public void testSleepForTooLong() throws Exception {\n        log += \"ran1\";\n        TimeUnit.SECONDS.sleep(100); // sleep for 100 seconds\n    }\n}\n```\nTimeout.seconds(10)设定每个方法超时规则。\n\n### 参数化测试 ###\njunit支持参数化测试，但是使用起来比testng要复杂点，需要以下五步：\n* 对测试类添加注解 @RunWith(Parameterized.class)\n* 将需要使用参数定义为私有变量\n* 使用上一步骤声明的私有变量作为入参，创建构造函数\n* 创建一个使用@Parameters注解的公共静态方法，它将需要测试的各种变量值通过数组或集合的形式返回\n* 使用定义的私有变量定义测试方法\n\n例如我们使用一个函数来返回斐波那契数列中指定坐标的数：\n\n```\npublic class Fibonacci {\n    public static int compute(int n) {\n    \tint result = 0;\n    \t\n        if (n <= 1) { \n        \tresult = n; \n        } else { \n        \tresult = compute(n - 1) + compute(n - 2); \n        }\n        \n        return result;\n    }\n}\n```\n\n斐波那契数列顺序应该是这样的：0,1,1,2,3,5,8。我们使用参数化的方式验证是否正确：\n\n```\n@RunWith(Parameterized.class)\npublic class FibonacciTest {\n    @Parameters\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object[][] {     \n                 { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }  \n           });\n    }\n\n    private int fInput;\n\n    private int fExpected;\n\n    public FibonacciTest(int input, int expected) {\n        fInput= input;\n        fExpected= expected;\n    }\n\n    @Test\n    public void test() {\n        assertEquals(fExpected, Fibonacci.compute(fInput));\n    }\n}\n```\n这里参数传递是通过构造函数的方式注入成成员变量，junit4还提供了@Parameter的方式来注入成员变量\n\n```\n@RunWith(Parameterized.class)\npublic class FibonacciTest {\n    @Parameters\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object[][] {\n                 { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }  \n           });\n    }\n\n    @Parameter // first data value (0) is default\n    public /* NOT private */ int fInput;\n\n    @Parameter(1)\n    public /* NOT private */ int fExpected;\n\n    @Test\n    public void test() {\n        assertEquals(fExpected, Fibonacci.compute(fInput));\n    }\n}\n```\n@Parameters有个name属性，它是通过二维数组参数来为一维数组生成一个名称，{index}代表当前参数的二维数组的index，{0}代表在二维数组中的第一个参数，{1}代表在二维数组中的第二个参数。例如下面这组参数：\n\n```\n \t@RunWith(Parameterized.class)\n    public static class AdditionTestWithArray {\n  \t\t@Parameters(name = \"{index}: {0} + {1} = {2}\")\n        public static Object[][] data() {\n            return new Object[][] { { 0, 0, 0 }, { 1, 1, 2 }, { 3, 2, 5 },\n                    { 4, 3, 7 } };\n        }\n\n\t...\n}\n```\n生成的测试case名称为：\n> [0:0 + 0 = 0]\n> [1:1 + 1 = 2]\n> [2:3 + 2 = 5]\n> [3:4 + 3 = 7]\n\n\n同样，我们可以使用@Parameter(0)来选择注入二维数组中第一个参数\n\n```\n\t@Parameter // first data value (0) is default\n    public /* NOT private */ int fInput;\n```\n\n为了方便参数化，如果需要的参数只有一个，那么第四步可以不返回一个二维数组，可以是Iterable或一维数组\n\n```\n@Parameters\npublic static Iterable<? extends Object> data() {\n    return Arrays.asList(\"first test\", \"second test\");\n}\n或\n@Parameters\npublic static Object[] data() {\n    return new Object[] { \"first test\", \"second test\" };\n}\n```\n\n### 规则 ###\njunit4的@Rule，有点类似AOP的思想，以被测试类为目标（target） ，以被测方法为切入点（Pointcut），我们自定义的规则，来定义通知、增强处理（Advice）就是你想要的功能。这里说的比较晦涩，我们举个例子：在测试方法执行过程中想创建一些临时文件，当方法结束了就自动删除临时文件，那么我们就可以使用系统提供的TemporaryFolder规则。TemporaryFolder会在每个方法执行前创建一个临时文件夹，在执行方法过程中创建的文件都会由临时文件夹管理，当方法结束后会自动删除。\n\n```\npublic static class HasTempFolder {\n  @Rule\n  public final TemporaryFolder folder = new TemporaryFolder();\n\n  @Test\n  public void testUsingTempFolder() throws IOException {\n    File createdFile = folder.newFile(\"myfile.txt\");\n    File createdFolder = folder.newFolder(\"subfolder\");\n    // ...\n  }\n} \n```\n除了TemporaryFolder规则外，junit4还提供了很多好用的规则：\n\n|规则|用途|\n|--|--|\n|TemporaryFolder|管理临时文件|\n|ExternalResource|管理额外的资源|\n|ErrorCollector |错误收集|\n|WatchmanTest|测试观察者，处理测试结果状态|\n|TestName|获取测试方法名|\n|Timeout|超时测试|\n|ExpectedException |异常测试|\n\n我们也可以自定义规则，只需要实现TestRule接口或MethodRule即可，如果同时实现两个接口则之后执行TestRule的apply，例如：\n\n```\n   public static class BothKindsOfRule implements TestRule, org.junit.rules.MethodRule {\n        public int applications = 0;\n\n        public Statement apply(Statement base, FrameworkMethod method,\n                Object target) {\n            applications++;\n            return base;\n        }\n\n        public Statement apply(Statement base, Description description) {\n            applications++;\n            return base;\n        }\n    }\n\n    public static class OneFieldTwoKindsOfRule {\n        @Rule\n        public BothKindsOfRule both = new BothKindsOfRule();\n\n        @Test\n        public void onlyOnce() {\n            assertEquals(1, both.applications);\n        }\n    }\n```\n\n### 分类测试 ###\n在junit4中没有像testng中分组的概念，只用分类测试，使用时分为以下步骤：\n* 定义分类\n* 将方法标记分类\n* 指定@RunWith(Categories.class)运行器\n* 使用IncludeCategory或ExcludeCategory选择要执行的分类\n\n```\n//定义两个分类\npublic interface FastTests { /* category marker */ }\npublic interface SlowTests { /* category marker */ }\n//将方法分类\npublic class A {\n  @Test\n  public void a() {\n    fail();\n  }\n\n  @Category(SlowTests.class)\n  @Test\n  public void b() {\n  }\n}\n//将类中的方法都分成相同的多个类\n@Category({SlowTests.class, FastTests.class})\npublic class B {\n  @Test\n  public void c() {\n\n  }\n}\n\n//执行SlowTests分类的测试方法\n@RunWith(Categories.class)\n@IncludeCategory(SlowTests.class)\n@ExcludeCategory(FastTests.class)\n@SuiteClasses( { A.class, B.class }) // Note that Categories is a kind of Suite\npublic class SlowTestSuite {\n  // Will run A.b, but not A.a or B.c\n}\n```\n\n我这里是使用gradle构建的工程，gradle提供了对junit4的支持，在test任务中，我们可以指定执行那些分类.\n```\ntest {\n    useJUnit {\n        includeCategories 'org.gradle.junit.CategoryA'\n        excludeCategories 'org.gradle.junit.CategoryB'\n    }\n}\n```","source":"_posts/从零学自动化测试之一文学会junit4(二).md","raw":"---\ntitle: 从零学自动化测试之一文学会junit4(二)\ncategories:\n- 从零学自动化测试\ntags:\n- junit\n\n---\n### 说在前面 ###\n\n使用java语言做测试开发的同学，必须要掌握一项测试框架，可能是junit、testng、spock,这里我们选择junit4上手，虽然2016年junit5已经问世，但是还不是主流，testng适合复杂场景测试，spock不时候入门学习。\n这里的内容主要源于[官网](https://junit.org/junit4/)\n<!-- more -->\n\n### 准备环境 ###\n这里我们使用intellij idea 新建一个gradle的java工程，新工程会默认使用junit4作为测试框架。\n\n### 创建第一个用例 ###\n\n我们使用intellij idea 创建被测试类，这个类主要是用来计算+法语句：\n\n```\npublic class Calculator {\n  public int evaluate(String expression) {\n    int sum = 0;\n    for (String summand: expression.split(\"\\\\+\"))\n      sum += Integer.valueOf(summand);\n    return sum;\n  }\n}\n```\n创建测试类:\n```\npublic class CalculatorTest {\n  @Test\n  public void evaluatesExpression() {\n    Calculator calculator = new Calculator();\n    int sum = calculator.evaluate(\"1+2+3\");\n    assertEquals(6, sum);\n  }\n}\n```\njunit4创建测试类只需要使用@Test注解标注即可，不像junit3还得继承TestCase，方法名还有限制等等。\n右键执行输出：\n\n```\nJUnit version 4.12\n.\nTime: 0,006\n\nOK (1 test)\n```\n\n### 常用注解 ###\n\n|注解|用途|\n|--|--|\n|@Test|定义一个测试方法|\n|@BeforeClass|所有的测试方法前被执行，public static修饰，且只执行一次|\n|@AfterClass|所有的测试方法后被执行，public static修饰，且只执行一次|\n|@Before|每一个测试方法前被执行一次|\n|@After|每一个测试方法后被执行一次|\n|@Ignore|忽略|\n|@RunWith|修改运行器|\n|@Rule|使用规则|\n\n```\npublic class TestFixturesExample {\n  static class ExpensiveManagedResource implements Closeable {\n    @Override\n    public void close() throws IOException {}\n  }\n\n  static class ManagedResource implements Closeable {\n    @Override\n    public void close() throws IOException {}\n  }\n\n  @BeforeClass\n  public static void setUpClass() {\n    System.out.println(\"@BeforeClass setUpClass\");\n    myExpensiveManagedResource = new ExpensiveManagedResource();\n  }\n\n  @AfterClass\n  public static void tearDownClass() throws IOException {\n    System.out.println(\"@AfterClass tearDownClass\");\n    myExpensiveManagedResource.close();\n    myExpensiveManagedResource = null;\n  }\n\n  private ManagedResource myManagedResource;\n  private static ExpensiveManagedResource myExpensiveManagedResource;\n\n  private void println(String string) {\n    System.out.println(string);\n  }\n\n  @Before\n  public void setUp() {\n    this.println(\"@Before setUp\");\n    this.myManagedResource = new ManagedResource();\n  }\n\n  @After\n  public void tearDown() throws IOException {\n    this.println(\"@After tearDown\");\n    this.myManagedResource.close();\n    this.myManagedResource = null;\n  }\n\n  @Test\n  public void test1() {\n    this.println(\"@Test test1()\");\n  }\n\n  @Test\n  public void test2() {\n    this.println(\"@Test test2()\");\n  }\n}\n```\n输出：\n\n> @BeforeClass setUpClass\n@Before setUp\n@Test test2()\n@After tearDown\n@Before setUp\n@Test test1()\n@After tearDown\n@AfterClass tearDownClass\n\n\n### Junit4断言 ###\njunit4底层使用了org.hamcrest这个断言框架，除此之外自己也封装了一些断言方式，在org.junit.Asert中，\n这里就简单列几个：\n\n|方法|描述|\n| -- | -- |\n|assertTrue(String message, boolean condition)|检查条件是否为真|\n|assertFalse(String message, boolean condition)|检查条件是否为假|\n|assertEquals(String message, Object expected,Object actual)|检查是否相等|\n|assertNotNull(String message, Object object)|检查对象是否不为空|\n|assertSame(String message, Object expected, Object actual)|检查两个对象引用是否引用同一对象（即对象是否相等）|\n\n使用的使用通过静态导入非常方便：\n\n```\nimport static org.junit.Assert.*;\npublic class AssertionsTest {  \n    @Test  \n    public void testAssertNull() {  \n        String str = null;  \n        assertNull(str);  \n    }  \n}\n```\n除此之外，junit4包装了hamcrest的assertThat，方便各种断言,例如我们想断言接口返回字符串中是否包含\"color\"或者\"colour\"\n\n```\nassertTrue(responseString.contains(\"color\") || responseString.contains(\"colour\"));\n// ==> failure message: \n// java.lang.AssertionError:\n\n\nassertThat(responseString, anyOf(containsString(\"color\"), containsString(\"colour\")));\n// ==> failure message:\n// java.lang.AssertionError: \n// Expected: (a string containing \"color\" or a string containing \"colour\")\n//      got: \"Please choose a font\"\n```\n\n### junit4运行器 ###\njunit4中的所有测试方法都是通过测试运行器执行的，junit4默认使用BlockJUnit4ClassRunner，但是我们可以通过@RunWith注解指定运行器来达到不同的运行器，例如使用系统默认的Suite这个套件运行器可以运行多个类中的测试方法：\n\n```\n@RunWith(Suite.class)\n @SuiteClasses({ATest.class, BTest.class, CTest.class})\n public class ABCSuite {\n }\n```\nsuite运行器会反射将SuiteClasses值中的类封装成runners供系统调用，这里我们使用的是intellij，则由intellij的runner调用。这样就达到了套件测试。\n\n其实也可以自定义规则，只需要继承ParentRunner或BlockJUnit4ClassRunner即可\n例如Spring Framework中的SpringJUnit4ClassRunner ，Mockito中的MockitoJUnitRunner，Cucumber框架中的Cucumber Runner等等\n这里我们看看cucumber自定义的runner.\n\n```\npublic class Cucumber extends ParentRunner<FeatureRunner> {\n}\n```\n使用时类似suite.\n\n```\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features= {\"classpath:features\"},\n        glue= {\"com.htest.core.steps\",\"com.htest.hjservice.steps\"},\n        tags= {\"@service\"},\n        plugin = {\"json:build/result.json\"}\n)\npublic class StartTestCase {\n}\n```\n\n这里的CucumberOptions注解是Cucumber运行器所需要的参数配置。\n\n### 执行测试顺序 ###\n在一个测试类中如果哟多个测试方法例如有testA(),testB(),testC()，那么junit4是以什么顺序执行呢？如果在testng中我们可以通过dependsOnMethods来管理测试方法的顺序。\n而junit4默认是通过方法名的字符串比较升序排序的。\n\n```\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestMethodOrder {\n    @Test\n    public void testA() {\n        System.out.println(\"first\");\n    }\n    @Test\n    public void testB() {\n        System.out.println(\"second\");\n    }\n    @Test\n    public void testC() {\n        System.out.println(\"third\");\n    }\n}\n```\n### 异常测试 ###\n当我们想验证一段代码是否抛出期望的异常时，就会用到异常测试，异常测试的使用时通过expected指定异常类：\n\n```\n@Test(expected = IndexOutOfBoundsException.class) \npublic void empty() { \n     new ArrayList<Object>().get(0); \n}\n```\n除此之外我们可以通过@Rule，设定异常规则，这里我们只需要知道@Rule会提供一个切入点，在测试方法前后或中执行被@Rule标记的类逻辑。后面会再次介绍。\n\n```\n public static class ThrowExceptionWithExpectedType {\n        @Rule\n        public ExpectedException thrown = none();\n\n        @Test\n        public void throwsNullPointerException1() {\n            thrown.expect(NullPointerException.class);\n            throw new NullPointerException();\n        }\n\n        @Test\n        public void throwsNullPointerException2() {\n            thrown.expect(NullPointerException.class);\n        }\n    }\n```\n### 忽略测试 ###\n \n忽略测试被用来禁止执行junit测试类的某些或者全部测试方法。使用时只需要将@Ignore添加在类或者方法上即可\n\n```\n@Ignore(\"For a good reason\")\npublic class IgnoreMe {\n        @Test\n        public void iFail() {\n            fail();\n        }\n\n        @Test\n        public void iFailToo() {\n            fail();\n        }\n\n        @Ignore\n        @Test\n        public void test() throws Exception {\n            fail(\"test() should not run\");\n        }\n    }\n```\n\n### 超时测试 ###\n junit4使用@Timeout注解来测试任意特定方法的执行时间。如果测试方法的执行时间大于指定的超时参数，测试方法将抛出异常，测试结果为失败，指定的超时参数单位为毫秒\n\n```\n@Test(timeout=1000)\npublic void testWithTimeout() {\n  ...\n}\n```\ntimeout超时测试的实现是通过创建一个守护线程来执行该测试方法的。同样我们也可以使用@Rule来创建超时规则:\n\n```\npublic class HasGlobalTimeout {\n    public static String log;\n    @Rule\n    public Timeout globalTimeout = Timeout.seconds(10); // 10 seconds max per method tested\n\n    @Test\n    public void testSleepForTooLong() throws Exception {\n        log += \"ran1\";\n        TimeUnit.SECONDS.sleep(100); // sleep for 100 seconds\n    }\n}\n```\nTimeout.seconds(10)设定每个方法超时规则。\n\n### 参数化测试 ###\njunit支持参数化测试，但是使用起来比testng要复杂点，需要以下五步：\n* 对测试类添加注解 @RunWith(Parameterized.class)\n* 将需要使用参数定义为私有变量\n* 使用上一步骤声明的私有变量作为入参，创建构造函数\n* 创建一个使用@Parameters注解的公共静态方法，它将需要测试的各种变量值通过数组或集合的形式返回\n* 使用定义的私有变量定义测试方法\n\n例如我们使用一个函数来返回斐波那契数列中指定坐标的数：\n\n```\npublic class Fibonacci {\n    public static int compute(int n) {\n    \tint result = 0;\n    \t\n        if (n <= 1) { \n        \tresult = n; \n        } else { \n        \tresult = compute(n - 1) + compute(n - 2); \n        }\n        \n        return result;\n    }\n}\n```\n\n斐波那契数列顺序应该是这样的：0,1,1,2,3,5,8。我们使用参数化的方式验证是否正确：\n\n```\n@RunWith(Parameterized.class)\npublic class FibonacciTest {\n    @Parameters\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object[][] {     \n                 { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }  \n           });\n    }\n\n    private int fInput;\n\n    private int fExpected;\n\n    public FibonacciTest(int input, int expected) {\n        fInput= input;\n        fExpected= expected;\n    }\n\n    @Test\n    public void test() {\n        assertEquals(fExpected, Fibonacci.compute(fInput));\n    }\n}\n```\n这里参数传递是通过构造函数的方式注入成成员变量，junit4还提供了@Parameter的方式来注入成员变量\n\n```\n@RunWith(Parameterized.class)\npublic class FibonacciTest {\n    @Parameters\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object[][] {\n                 { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }  \n           });\n    }\n\n    @Parameter // first data value (0) is default\n    public /* NOT private */ int fInput;\n\n    @Parameter(1)\n    public /* NOT private */ int fExpected;\n\n    @Test\n    public void test() {\n        assertEquals(fExpected, Fibonacci.compute(fInput));\n    }\n}\n```\n@Parameters有个name属性，它是通过二维数组参数来为一维数组生成一个名称，{index}代表当前参数的二维数组的index，{0}代表在二维数组中的第一个参数，{1}代表在二维数组中的第二个参数。例如下面这组参数：\n\n```\n \t@RunWith(Parameterized.class)\n    public static class AdditionTestWithArray {\n  \t\t@Parameters(name = \"{index}: {0} + {1} = {2}\")\n        public static Object[][] data() {\n            return new Object[][] { { 0, 0, 0 }, { 1, 1, 2 }, { 3, 2, 5 },\n                    { 4, 3, 7 } };\n        }\n\n\t...\n}\n```\n生成的测试case名称为：\n> [0:0 + 0 = 0]\n> [1:1 + 1 = 2]\n> [2:3 + 2 = 5]\n> [3:4 + 3 = 7]\n\n\n同样，我们可以使用@Parameter(0)来选择注入二维数组中第一个参数\n\n```\n\t@Parameter // first data value (0) is default\n    public /* NOT private */ int fInput;\n```\n\n为了方便参数化，如果需要的参数只有一个，那么第四步可以不返回一个二维数组，可以是Iterable或一维数组\n\n```\n@Parameters\npublic static Iterable<? extends Object> data() {\n    return Arrays.asList(\"first test\", \"second test\");\n}\n或\n@Parameters\npublic static Object[] data() {\n    return new Object[] { \"first test\", \"second test\" };\n}\n```\n\n### 规则 ###\njunit4的@Rule，有点类似AOP的思想，以被测试类为目标（target） ，以被测方法为切入点（Pointcut），我们自定义的规则，来定义通知、增强处理（Advice）就是你想要的功能。这里说的比较晦涩，我们举个例子：在测试方法执行过程中想创建一些临时文件，当方法结束了就自动删除临时文件，那么我们就可以使用系统提供的TemporaryFolder规则。TemporaryFolder会在每个方法执行前创建一个临时文件夹，在执行方法过程中创建的文件都会由临时文件夹管理，当方法结束后会自动删除。\n\n```\npublic static class HasTempFolder {\n  @Rule\n  public final TemporaryFolder folder = new TemporaryFolder();\n\n  @Test\n  public void testUsingTempFolder() throws IOException {\n    File createdFile = folder.newFile(\"myfile.txt\");\n    File createdFolder = folder.newFolder(\"subfolder\");\n    // ...\n  }\n} \n```\n除了TemporaryFolder规则外，junit4还提供了很多好用的规则：\n\n|规则|用途|\n|--|--|\n|TemporaryFolder|管理临时文件|\n|ExternalResource|管理额外的资源|\n|ErrorCollector |错误收集|\n|WatchmanTest|测试观察者，处理测试结果状态|\n|TestName|获取测试方法名|\n|Timeout|超时测试|\n|ExpectedException |异常测试|\n\n我们也可以自定义规则，只需要实现TestRule接口或MethodRule即可，如果同时实现两个接口则之后执行TestRule的apply，例如：\n\n```\n   public static class BothKindsOfRule implements TestRule, org.junit.rules.MethodRule {\n        public int applications = 0;\n\n        public Statement apply(Statement base, FrameworkMethod method,\n                Object target) {\n            applications++;\n            return base;\n        }\n\n        public Statement apply(Statement base, Description description) {\n            applications++;\n            return base;\n        }\n    }\n\n    public static class OneFieldTwoKindsOfRule {\n        @Rule\n        public BothKindsOfRule both = new BothKindsOfRule();\n\n        @Test\n        public void onlyOnce() {\n            assertEquals(1, both.applications);\n        }\n    }\n```\n\n### 分类测试 ###\n在junit4中没有像testng中分组的概念，只用分类测试，使用时分为以下步骤：\n* 定义分类\n* 将方法标记分类\n* 指定@RunWith(Categories.class)运行器\n* 使用IncludeCategory或ExcludeCategory选择要执行的分类\n\n```\n//定义两个分类\npublic interface FastTests { /* category marker */ }\npublic interface SlowTests { /* category marker */ }\n//将方法分类\npublic class A {\n  @Test\n  public void a() {\n    fail();\n  }\n\n  @Category(SlowTests.class)\n  @Test\n  public void b() {\n  }\n}\n//将类中的方法都分成相同的多个类\n@Category({SlowTests.class, FastTests.class})\npublic class B {\n  @Test\n  public void c() {\n\n  }\n}\n\n//执行SlowTests分类的测试方法\n@RunWith(Categories.class)\n@IncludeCategory(SlowTests.class)\n@ExcludeCategory(FastTests.class)\n@SuiteClasses( { A.class, B.class }) // Note that Categories is a kind of Suite\npublic class SlowTestSuite {\n  // Will run A.b, but not A.a or B.c\n}\n```\n\n我这里是使用gradle构建的工程，gradle提供了对junit4的支持，在test任务中，我们可以指定执行那些分类.\n```\ntest {\n    useJUnit {\n        includeCategories 'org.gradle.junit.CategoryA'\n        excludeCategories 'org.gradle.junit.CategoryB'\n    }\n}\n```","slug":"从零学自动化测试之一文学会junit4(二)","published":1,"date":"2018-03-19T08:09:22.072Z","updated":"2018-03-19T08:09:22.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjcccr0009qoy8ym47as4k","content":"<h3 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h3><p>使用java语言做测试开发的同学，必须要掌握一项测试框架，可能是junit、testng、spock,这里我们选择junit4上手，虽然2016年junit5已经问世，但是还不是主流，testng适合复杂场景测试，spock不时候入门学习。<br>这里的内容主要源于<a href=\"https://junit.org/junit4/\" target=\"_blank\" rel=\"noopener\">官网</a><br><a id=\"more\"></a></p>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>这里我们使用intellij idea 新建一个gradle的java工程，新工程会默认使用junit4作为测试框架。</p>\n<h3 id=\"创建第一个用例\"><a href=\"#创建第一个用例\" class=\"headerlink\" title=\"创建第一个用例\"></a>创建第一个用例</h3><p>我们使用intellij idea 创建被测试类，这个类主要是用来计算+法语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Calculator &#123;</span><br><span class=\"line\">  public int evaluate(String expression) &#123;</span><br><span class=\"line\">    int sum = 0;</span><br><span class=\"line\">    for (String summand: expression.split(&quot;\\\\+&quot;))</span><br><span class=\"line\">      sum += Integer.valueOf(summand);</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建测试类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CalculatorTest &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void evaluatesExpression() &#123;</span><br><span class=\"line\">    Calculator calculator = new Calculator();</span><br><span class=\"line\">    int sum = calculator.evaluate(&quot;1+2+3&quot;);</span><br><span class=\"line\">    assertEquals(6, sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>junit4创建测试类只需要使用@Test注解标注即可，不像junit3还得继承TestCase，方法名还有限制等等。<br>右键执行输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JUnit version 4.12</span><br><span class=\"line\">.</span><br><span class=\"line\">Time: 0,006</span><br><span class=\"line\"></span><br><span class=\"line\">OK (1 test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Test</td>\n<td>定义一个测试方法</td>\n</tr>\n<tr>\n<td>@BeforeClass</td>\n<td>所有的测试方法前被执行，public static修饰，且只执行一次</td>\n</tr>\n<tr>\n<td>@AfterClass</td>\n<td>所有的测试方法后被执行，public static修饰，且只执行一次</td>\n</tr>\n<tr>\n<td>@Before</td>\n<td>每一个测试方法前被执行一次</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>每一个测试方法后被执行一次</td>\n</tr>\n<tr>\n<td>@Ignore</td>\n<td>忽略</td>\n</tr>\n<tr>\n<td>@RunWith</td>\n<td>修改运行器</td>\n</tr>\n<tr>\n<td>@Rule</td>\n<td>使用规则</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestFixturesExample &#123;</span><br><span class=\"line\">  static class ExpensiveManagedResource implements Closeable &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void close() throws IOException &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static class ManagedResource implements Closeable &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void close() throws IOException &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @BeforeClass</span><br><span class=\"line\">  public static void setUpClass() &#123;</span><br><span class=\"line\">    System.out.println(&quot;@BeforeClass setUpClass&quot;);</span><br><span class=\"line\">    myExpensiveManagedResource = new ExpensiveManagedResource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @AfterClass</span><br><span class=\"line\">  public static void tearDownClass() throws IOException &#123;</span><br><span class=\"line\">    System.out.println(&quot;@AfterClass tearDownClass&quot;);</span><br><span class=\"line\">    myExpensiveManagedResource.close();</span><br><span class=\"line\">    myExpensiveManagedResource = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private ManagedResource myManagedResource;</span><br><span class=\"line\">  private static ExpensiveManagedResource myExpensiveManagedResource;</span><br><span class=\"line\"></span><br><span class=\"line\">  private void println(String string) &#123;</span><br><span class=\"line\">    System.out.println(string);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Before</span><br><span class=\"line\">  public void setUp() &#123;</span><br><span class=\"line\">    this.println(&quot;@Before setUp&quot;);</span><br><span class=\"line\">    this.myManagedResource = new ManagedResource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @After</span><br><span class=\"line\">  public void tearDown() throws IOException &#123;</span><br><span class=\"line\">    this.println(&quot;@After tearDown&quot;);</span><br><span class=\"line\">    this.myManagedResource.close();</span><br><span class=\"line\">    this.myManagedResource = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void test1() &#123;</span><br><span class=\"line\">    this.println(&quot;@Test test1()&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void test2() &#123;</span><br><span class=\"line\">    this.println(&quot;@Test test2()&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>@BeforeClass setUpClass<br>@Before setUp<br>@Test test2()<br>@After tearDown<br>@Before setUp<br>@Test test1()<br>@After tearDown<br>@AfterClass tearDownClass</p>\n</blockquote>\n<h3 id=\"Junit4断言\"><a href=\"#Junit4断言\" class=\"headerlink\" title=\"Junit4断言\"></a>Junit4断言</h3><p>junit4底层使用了org.hamcrest这个断言框架，除此之外自己也封装了一些断言方式，在org.junit.Asert中，<br>这里就简单列几个：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assertTrue(String message, boolean condition)</td>\n<td>检查条件是否为真</td>\n</tr>\n<tr>\n<td>assertFalse(String message, boolean condition)</td>\n<td>检查条件是否为假</td>\n</tr>\n<tr>\n<td>assertEquals(String message, Object expected,Object actual)</td>\n<td>检查是否相等</td>\n</tr>\n<tr>\n<td>assertNotNull(String message, Object object)</td>\n<td>检查对象是否不为空</td>\n</tr>\n<tr>\n<td>assertSame(String message, Object expected, Object actual)</td>\n<td>检查两个对象引用是否引用同一对象（即对象是否相等）</td>\n</tr>\n</tbody>\n</table>\n<p>使用的使用通过静态导入非常方便：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static org.junit.Assert.*;</span><br><span class=\"line\">public class AssertionsTest &#123;  </span><br><span class=\"line\">    @Test  </span><br><span class=\"line\">    public void testAssertNull() &#123;  </span><br><span class=\"line\">        String str = null;  </span><br><span class=\"line\">        assertNull(str);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外，junit4包装了hamcrest的assertThat，方便各种断言,例如我们想断言接口返回字符串中是否包含”color”或者”colour”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(responseString.contains(&quot;color&quot;) || responseString.contains(&quot;colour&quot;));</span><br><span class=\"line\">// ==&gt; failure message: </span><br><span class=\"line\">// java.lang.AssertionError:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">assertThat(responseString, anyOf(containsString(&quot;color&quot;), containsString(&quot;colour&quot;)));</span><br><span class=\"line\">// ==&gt; failure message:</span><br><span class=\"line\">// java.lang.AssertionError: </span><br><span class=\"line\">// Expected: (a string containing &quot;color&quot; or a string containing &quot;colour&quot;)</span><br><span class=\"line\">//      got: &quot;Please choose a font&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"junit4运行器\"><a href=\"#junit4运行器\" class=\"headerlink\" title=\"junit4运行器\"></a>junit4运行器</h3><p>junit4中的所有测试方法都是通过测试运行器执行的，junit4默认使用BlockJUnit4ClassRunner，但是我们可以通过@RunWith注解指定运行器来达到不同的运行器，例如使用系统默认的Suite这个套件运行器可以运行多个类中的测试方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Suite.class)</span><br><span class=\"line\"> @SuiteClasses(&#123;ATest.class, BTest.class, CTest.class&#125;)</span><br><span class=\"line\"> public class ABCSuite &#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>suite运行器会反射将SuiteClasses值中的类封装成runners供系统调用，这里我们使用的是intellij，则由intellij的runner调用。这样就达到了套件测试。</p>\n<p>其实也可以自定义规则，只需要继承ParentRunner或BlockJUnit4ClassRunner即可<br>例如Spring Framework中的SpringJUnit4ClassRunner ，Mockito中的MockitoJUnitRunner，Cucumber框架中的Cucumber Runner等等<br>这里我们看看cucumber自定义的runner.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Cucumber extends ParentRunner&lt;FeatureRunner&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时类似suite.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Cucumber.class)</span><br><span class=\"line\">@CucumberOptions(</span><br><span class=\"line\">        features= &#123;&quot;classpath:features&quot;&#125;,</span><br><span class=\"line\">        glue= &#123;&quot;com.htest.core.steps&quot;,&quot;com.htest.hjservice.steps&quot;&#125;,</span><br><span class=\"line\">        tags= &#123;&quot;@service&quot;&#125;,</span><br><span class=\"line\">        plugin = &#123;&quot;json:build/result.json&quot;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">public class StartTestCase &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的CucumberOptions注解是Cucumber运行器所需要的参数配置。</p>\n<h3 id=\"执行测试顺序\"><a href=\"#执行测试顺序\" class=\"headerlink\" title=\"执行测试顺序\"></a>执行测试顺序</h3><p>在一个测试类中如果哟多个测试方法例如有testA(),testB(),testC()，那么junit4是以什么顺序执行呢？如果在testng中我们可以通过dependsOnMethods来管理测试方法的顺序。<br>而junit4默认是通过方法名的字符串比较升序排序的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestMethodOrder &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testA() &#123;</span><br><span class=\"line\">        System.out.println(&quot;first&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testB() &#123;</span><br><span class=\"line\">        System.out.println(&quot;second&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testC() &#123;</span><br><span class=\"line\">        System.out.println(&quot;third&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常测试\"><a href=\"#异常测试\" class=\"headerlink\" title=\"异常测试\"></a>异常测试</h3><p>当我们想验证一段代码是否抛出期望的异常时，就会用到异常测试，异常测试的使用时通过expected指定异常类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(expected = IndexOutOfBoundsException.class) </span><br><span class=\"line\">public void empty() &#123; </span><br><span class=\"line\">     new ArrayList&lt;Object&gt;().get(0); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外我们可以通过@Rule，设定异常规则，这里我们只需要知道@Rule会提供一个切入点，在测试方法前后或中执行被@Rule标记的类逻辑。后面会再次介绍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class ThrowExceptionWithExpectedType &#123;</span><br><span class=\"line\">       @Rule</span><br><span class=\"line\">       public ExpectedException thrown = none();</span><br><span class=\"line\"></span><br><span class=\"line\">       @Test</span><br><span class=\"line\">       public void throwsNullPointerException1() &#123;</span><br><span class=\"line\">           thrown.expect(NullPointerException.class);</span><br><span class=\"line\">           throw new NullPointerException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Test</span><br><span class=\"line\">       public void throwsNullPointerException2() &#123;</span><br><span class=\"line\">           thrown.expect(NullPointerException.class);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"忽略测试\"><a href=\"#忽略测试\" class=\"headerlink\" title=\"忽略测试\"></a>忽略测试</h3><p>忽略测试被用来禁止执行junit测试类的某些或者全部测试方法。使用时只需要将@Ignore添加在类或者方法上即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Ignore(&quot;For a good reason&quot;)</span><br><span class=\"line\">public class IgnoreMe &#123;</span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void iFail() &#123;</span><br><span class=\"line\">            fail();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void iFailToo() &#123;</span><br><span class=\"line\">            fail();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Ignore</span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void test() throws Exception &#123;</span><br><span class=\"line\">            fail(&quot;test() should not run&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时测试\"><a href=\"#超时测试\" class=\"headerlink\" title=\"超时测试\"></a>超时测试</h3><p> junit4使用@Timeout注解来测试任意特定方法的执行时间。如果测试方法的执行时间大于指定的超时参数，测试方法将抛出异常，测试结果为失败，指定的超时参数单位为毫秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(timeout=1000)</span><br><span class=\"line\">public void testWithTimeout() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>timeout超时测试的实现是通过创建一个守护线程来执行该测试方法的。同样我们也可以使用@Rule来创建超时规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HasGlobalTimeout &#123;</span><br><span class=\"line\">    public static String log;</span><br><span class=\"line\">    @Rule</span><br><span class=\"line\">    public Timeout globalTimeout = Timeout.seconds(10); // 10 seconds max per method tested</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSleepForTooLong() throws Exception &#123;</span><br><span class=\"line\">        log += &quot;ran1&quot;;</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(100); // sleep for 100 seconds</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Timeout.seconds(10)设定每个方法超时规则。</p>\n<h3 id=\"参数化测试\"><a href=\"#参数化测试\" class=\"headerlink\" title=\"参数化测试\"></a>参数化测试</h3><p>junit支持参数化测试，但是使用起来比testng要复杂点，需要以下五步：</p>\n<ul>\n<li>对测试类添加注解 @RunWith(Parameterized.class)</li>\n<li>将需要使用参数定义为私有变量</li>\n<li>使用上一步骤声明的私有变量作为入参，创建构造函数</li>\n<li>创建一个使用@Parameters注解的公共静态方法，它将需要测试的各种变量值通过数组或集合的形式返回</li>\n<li>使用定义的私有变量定义测试方法</li>\n</ul>\n<p>例如我们使用一个函数来返回斐波那契数列中指定坐标的数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Fibonacci &#123;</span><br><span class=\"line\">    public static int compute(int n) &#123;</span><br><span class=\"line\">    \tint result = 0;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        if (n &lt;= 1) &#123; </span><br><span class=\"line\">        \tresult = n; </span><br><span class=\"line\">        &#125; else &#123; </span><br><span class=\"line\">        \tresult = compute(n - 1) + compute(n - 2); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>斐波那契数列顺序应该是这样的：0,1,1,2,3,5,8。我们使用参数化的方式验证是否正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Parameterized.class)</span><br><span class=\"line\">public class FibonacciTest &#123;</span><br><span class=\"line\">    @Parameters</span><br><span class=\"line\">    public static Collection&lt;Object[]&gt; data() &#123;</span><br><span class=\"line\">        return Arrays.asList(new Object[][] &#123;     </span><br><span class=\"line\">                 &#123; 0, 0 &#125;, &#123; 1, 1 &#125;, &#123; 2, 1 &#125;, &#123; 3, 2 &#125;, &#123; 4, 3 &#125;, &#123; 5, 5 &#125;, &#123; 6, 8 &#125;  </span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int fInput;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int fExpected;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FibonacciTest(int input, int expected) &#123;</span><br><span class=\"line\">        fInput= input;</span><br><span class=\"line\">        fExpected= expected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        assertEquals(fExpected, Fibonacci.compute(fInput));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里参数传递是通过构造函数的方式注入成成员变量，junit4还提供了@Parameter的方式来注入成员变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Parameterized.class)</span><br><span class=\"line\">public class FibonacciTest &#123;</span><br><span class=\"line\">    @Parameters</span><br><span class=\"line\">    public static Collection&lt;Object[]&gt; data() &#123;</span><br><span class=\"line\">        return Arrays.asList(new Object[][] &#123;</span><br><span class=\"line\">                 &#123; 0, 0 &#125;, &#123; 1, 1 &#125;, &#123; 2, 1 &#125;, &#123; 3, 2 &#125;, &#123; 4, 3 &#125;, &#123; 5, 5 &#125;, &#123; 6, 8 &#125;  </span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Parameter // first data value (0) is default</span><br><span class=\"line\">    public /* NOT private */ int fInput;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Parameter(1)</span><br><span class=\"line\">    public /* NOT private */ int fExpected;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        assertEquals(fExpected, Fibonacci.compute(fInput));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Parameters有个name属性，它是通过二维数组参数来为一维数组生成一个名称，{index}代表当前参数的二维数组的index，{0}代表在二维数组中的第一个参数，{1}代表在二维数组中的第二个参数。例如下面这组参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t@RunWith(Parameterized.class)</span><br><span class=\"line\">    public static class AdditionTestWithArray &#123;</span><br><span class=\"line\">  \t\t@Parameters(name = &quot;&#123;index&#125;: &#123;0&#125; + &#123;1&#125; = &#123;2&#125;&quot;)</span><br><span class=\"line\">        public static Object[][] data() &#123;</span><br><span class=\"line\">            return new Object[][] &#123; &#123; 0, 0, 0 &#125;, &#123; 1, 1, 2 &#125;, &#123; 3, 2, 5 &#125;,</span><br><span class=\"line\">                    &#123; 4, 3, 7 &#125; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的测试case名称为：</p>\n<blockquote>\n<p>[0:0 + 0 = 0]<br>[1:1 + 1 = 2]<br>[2:3 + 2 = 5]<br>[3:4 + 3 = 7]</p>\n</blockquote>\n<p>同样，我们可以使用@Parameter(0)来选择注入二维数组中第一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Parameter // first data value (0) is default</span><br><span class=\"line\">   public /* NOT private */ int fInput;</span><br></pre></td></tr></table></figure>\n<p>为了方便参数化，如果需要的参数只有一个，那么第四步可以不返回一个二维数组，可以是Iterable或一维数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Parameters</span><br><span class=\"line\">public static Iterable&lt;? extends Object&gt; data() &#123;</span><br><span class=\"line\">    return Arrays.asList(&quot;first test&quot;, &quot;second test&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">@Parameters</span><br><span class=\"line\">public static Object[] data() &#123;</span><br><span class=\"line\">    return new Object[] &#123; &quot;first test&quot;, &quot;second test&quot; &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>junit4的@Rule，有点类似AOP的思想，以被测试类为目标（target） ，以被测方法为切入点（Pointcut），我们自定义的规则，来定义通知、增强处理（Advice）就是你想要的功能。这里说的比较晦涩，我们举个例子：在测试方法执行过程中想创建一些临时文件，当方法结束了就自动删除临时文件，那么我们就可以使用系统提供的TemporaryFolder规则。TemporaryFolder会在每个方法执行前创建一个临时文件夹，在执行方法过程中创建的文件都会由临时文件夹管理，当方法结束后会自动删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class HasTempFolder &#123;</span><br><span class=\"line\">  @Rule</span><br><span class=\"line\">  public final TemporaryFolder folder = new TemporaryFolder();</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void testUsingTempFolder() throws IOException &#123;</span><br><span class=\"line\">    File createdFile = folder.newFile(&quot;myfile.txt&quot;);</span><br><span class=\"line\">    File createdFolder = folder.newFolder(&quot;subfolder&quot;);</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了TemporaryFolder规则外，junit4还提供了很多好用的规则：</p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TemporaryFolder</td>\n<td>管理临时文件</td>\n</tr>\n<tr>\n<td>ExternalResource</td>\n<td>管理额外的资源</td>\n</tr>\n<tr>\n<td>ErrorCollector</td>\n<td>错误收集</td>\n</tr>\n<tr>\n<td>WatchmanTest</td>\n<td>测试观察者，处理测试结果状态</td>\n</tr>\n<tr>\n<td>TestName</td>\n<td>获取测试方法名</td>\n</tr>\n<tr>\n<td>Timeout</td>\n<td>超时测试</td>\n</tr>\n<tr>\n<td>ExpectedException</td>\n<td>异常测试</td>\n</tr>\n</tbody>\n</table>\n<p>我们也可以自定义规则，只需要实现TestRule接口或MethodRule即可，如果同时实现两个接口则之后执行TestRule的apply，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class BothKindsOfRule implements TestRule, org.junit.rules.MethodRule &#123;</span><br><span class=\"line\">     public int applications = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">     public Statement apply(Statement base, FrameworkMethod method,</span><br><span class=\"line\">             Object target) &#123;</span><br><span class=\"line\">         applications++;</span><br><span class=\"line\">         return base;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public Statement apply(Statement base, Description description) &#123;</span><br><span class=\"line\">         applications++;</span><br><span class=\"line\">         return base;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static class OneFieldTwoKindsOfRule &#123;</span><br><span class=\"line\">     @Rule</span><br><span class=\"line\">     public BothKindsOfRule both = new BothKindsOfRule();</span><br><span class=\"line\"></span><br><span class=\"line\">     @Test</span><br><span class=\"line\">     public void onlyOnce() &#123;</span><br><span class=\"line\">         assertEquals(1, both.applications);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分类测试\"><a href=\"#分类测试\" class=\"headerlink\" title=\"分类测试\"></a>分类测试</h3><p>在junit4中没有像testng中分组的概念，只用分类测试，使用时分为以下步骤：</p>\n<ul>\n<li>定义分类</li>\n<li>将方法标记分类</li>\n<li>指定@RunWith(Categories.class)运行器</li>\n<li>使用IncludeCategory或ExcludeCategory选择要执行的分类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义两个分类</span><br><span class=\"line\">public interface FastTests &#123; /* category marker */ &#125;</span><br><span class=\"line\">public interface SlowTests &#123; /* category marker */ &#125;</span><br><span class=\"line\">//将方法分类</span><br><span class=\"line\">public class A &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void a() &#123;</span><br><span class=\"line\">    fail();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Category(SlowTests.class)</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void b() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//将类中的方法都分成相同的多个类</span><br><span class=\"line\">@Category(&#123;SlowTests.class, FastTests.class&#125;)</span><br><span class=\"line\">public class B &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void c() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//执行SlowTests分类的测试方法</span><br><span class=\"line\">@RunWith(Categories.class)</span><br><span class=\"line\">@IncludeCategory(SlowTests.class)</span><br><span class=\"line\">@ExcludeCategory(FastTests.class)</span><br><span class=\"line\">@SuiteClasses( &#123; A.class, B.class &#125;) // Note that Categories is a kind of Suite</span><br><span class=\"line\">public class SlowTestSuite &#123;</span><br><span class=\"line\">  // Will run A.b, but not A.a or B.c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我这里是使用gradle构建的工程，gradle提供了对junit4的支持，在test任务中，我们可以指定执行那些分类.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test &#123;</span><br><span class=\"line\">    useJUnit &#123;</span><br><span class=\"line\">        includeCategories &apos;org.gradle.junit.CategoryA&apos;</span><br><span class=\"line\">        excludeCategories &apos;org.gradle.junit.CategoryB&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h3><p>使用java语言做测试开发的同学，必须要掌握一项测试框架，可能是junit、testng、spock,这里我们选择junit4上手，虽然2016年junit5已经问世，但是还不是主流，testng适合复杂场景测试，spock不时候入门学习。<br>这里的内容主要源于<a href=\"https://junit.org/junit4/\" target=\"_blank\" rel=\"noopener\">官网</a><br>","more":"</p>\n<h3 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h3><p>这里我们使用intellij idea 新建一个gradle的java工程，新工程会默认使用junit4作为测试框架。</p>\n<h3 id=\"创建第一个用例\"><a href=\"#创建第一个用例\" class=\"headerlink\" title=\"创建第一个用例\"></a>创建第一个用例</h3><p>我们使用intellij idea 创建被测试类，这个类主要是用来计算+法语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Calculator &#123;</span><br><span class=\"line\">  public int evaluate(String expression) &#123;</span><br><span class=\"line\">    int sum = 0;</span><br><span class=\"line\">    for (String summand: expression.split(&quot;\\\\+&quot;))</span><br><span class=\"line\">      sum += Integer.valueOf(summand);</span><br><span class=\"line\">    return sum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建测试类:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CalculatorTest &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void evaluatesExpression() &#123;</span><br><span class=\"line\">    Calculator calculator = new Calculator();</span><br><span class=\"line\">    int sum = calculator.evaluate(&quot;1+2+3&quot;);</span><br><span class=\"line\">    assertEquals(6, sum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>junit4创建测试类只需要使用@Test注解标注即可，不像junit3还得继承TestCase，方法名还有限制等等。<br>右键执行输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JUnit version 4.12</span><br><span class=\"line\">.</span><br><span class=\"line\">Time: 0,006</span><br><span class=\"line\"></span><br><span class=\"line\">OK (1 test)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Test</td>\n<td>定义一个测试方法</td>\n</tr>\n<tr>\n<td>@BeforeClass</td>\n<td>所有的测试方法前被执行，public static修饰，且只执行一次</td>\n</tr>\n<tr>\n<td>@AfterClass</td>\n<td>所有的测试方法后被执行，public static修饰，且只执行一次</td>\n</tr>\n<tr>\n<td>@Before</td>\n<td>每一个测试方法前被执行一次</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>每一个测试方法后被执行一次</td>\n</tr>\n<tr>\n<td>@Ignore</td>\n<td>忽略</td>\n</tr>\n<tr>\n<td>@RunWith</td>\n<td>修改运行器</td>\n</tr>\n<tr>\n<td>@Rule</td>\n<td>使用规则</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestFixturesExample &#123;</span><br><span class=\"line\">  static class ExpensiveManagedResource implements Closeable &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void close() throws IOException &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  static class ManagedResource implements Closeable &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void close() throws IOException &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @BeforeClass</span><br><span class=\"line\">  public static void setUpClass() &#123;</span><br><span class=\"line\">    System.out.println(&quot;@BeforeClass setUpClass&quot;);</span><br><span class=\"line\">    myExpensiveManagedResource = new ExpensiveManagedResource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @AfterClass</span><br><span class=\"line\">  public static void tearDownClass() throws IOException &#123;</span><br><span class=\"line\">    System.out.println(&quot;@AfterClass tearDownClass&quot;);</span><br><span class=\"line\">    myExpensiveManagedResource.close();</span><br><span class=\"line\">    myExpensiveManagedResource = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  private ManagedResource myManagedResource;</span><br><span class=\"line\">  private static ExpensiveManagedResource myExpensiveManagedResource;</span><br><span class=\"line\"></span><br><span class=\"line\">  private void println(String string) &#123;</span><br><span class=\"line\">    System.out.println(string);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Before</span><br><span class=\"line\">  public void setUp() &#123;</span><br><span class=\"line\">    this.println(&quot;@Before setUp&quot;);</span><br><span class=\"line\">    this.myManagedResource = new ManagedResource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @After</span><br><span class=\"line\">  public void tearDown() throws IOException &#123;</span><br><span class=\"line\">    this.println(&quot;@After tearDown&quot;);</span><br><span class=\"line\">    this.myManagedResource.close();</span><br><span class=\"line\">    this.myManagedResource = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void test1() &#123;</span><br><span class=\"line\">    this.println(&quot;@Test test1()&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void test2() &#123;</span><br><span class=\"line\">    this.println(&quot;@Test test2()&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<blockquote>\n<p>@BeforeClass setUpClass<br>@Before setUp<br>@Test test2()<br>@After tearDown<br>@Before setUp<br>@Test test1()<br>@After tearDown<br>@AfterClass tearDownClass</p>\n</blockquote>\n<h3 id=\"Junit4断言\"><a href=\"#Junit4断言\" class=\"headerlink\" title=\"Junit4断言\"></a>Junit4断言</h3><p>junit4底层使用了org.hamcrest这个断言框架，除此之外自己也封装了一些断言方式，在org.junit.Asert中，<br>这里就简单列几个：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assertTrue(String message, boolean condition)</td>\n<td>检查条件是否为真</td>\n</tr>\n<tr>\n<td>assertFalse(String message, boolean condition)</td>\n<td>检查条件是否为假</td>\n</tr>\n<tr>\n<td>assertEquals(String message, Object expected,Object actual)</td>\n<td>检查是否相等</td>\n</tr>\n<tr>\n<td>assertNotNull(String message, Object object)</td>\n<td>检查对象是否不为空</td>\n</tr>\n<tr>\n<td>assertSame(String message, Object expected, Object actual)</td>\n<td>检查两个对象引用是否引用同一对象（即对象是否相等）</td>\n</tr>\n</tbody>\n</table>\n<p>使用的使用通过静态导入非常方便：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static org.junit.Assert.*;</span><br><span class=\"line\">public class AssertionsTest &#123;  </span><br><span class=\"line\">    @Test  </span><br><span class=\"line\">    public void testAssertNull() &#123;  </span><br><span class=\"line\">        String str = null;  </span><br><span class=\"line\">        assertNull(str);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外，junit4包装了hamcrest的assertThat，方便各种断言,例如我们想断言接口返回字符串中是否包含”color”或者”colour”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(responseString.contains(&quot;color&quot;) || responseString.contains(&quot;colour&quot;));</span><br><span class=\"line\">// ==&gt; failure message: </span><br><span class=\"line\">// java.lang.AssertionError:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">assertThat(responseString, anyOf(containsString(&quot;color&quot;), containsString(&quot;colour&quot;)));</span><br><span class=\"line\">// ==&gt; failure message:</span><br><span class=\"line\">// java.lang.AssertionError: </span><br><span class=\"line\">// Expected: (a string containing &quot;color&quot; or a string containing &quot;colour&quot;)</span><br><span class=\"line\">//      got: &quot;Please choose a font&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"junit4运行器\"><a href=\"#junit4运行器\" class=\"headerlink\" title=\"junit4运行器\"></a>junit4运行器</h3><p>junit4中的所有测试方法都是通过测试运行器执行的，junit4默认使用BlockJUnit4ClassRunner，但是我们可以通过@RunWith注解指定运行器来达到不同的运行器，例如使用系统默认的Suite这个套件运行器可以运行多个类中的测试方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Suite.class)</span><br><span class=\"line\"> @SuiteClasses(&#123;ATest.class, BTest.class, CTest.class&#125;)</span><br><span class=\"line\"> public class ABCSuite &#123;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>suite运行器会反射将SuiteClasses值中的类封装成runners供系统调用，这里我们使用的是intellij，则由intellij的runner调用。这样就达到了套件测试。</p>\n<p>其实也可以自定义规则，只需要继承ParentRunner或BlockJUnit4ClassRunner即可<br>例如Spring Framework中的SpringJUnit4ClassRunner ，Mockito中的MockitoJUnitRunner，Cucumber框架中的Cucumber Runner等等<br>这里我们看看cucumber自定义的runner.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Cucumber extends ParentRunner&lt;FeatureRunner&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时类似suite.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Cucumber.class)</span><br><span class=\"line\">@CucumberOptions(</span><br><span class=\"line\">        features= &#123;&quot;classpath:features&quot;&#125;,</span><br><span class=\"line\">        glue= &#123;&quot;com.htest.core.steps&quot;,&quot;com.htest.hjservice.steps&quot;&#125;,</span><br><span class=\"line\">        tags= &#123;&quot;@service&quot;&#125;,</span><br><span class=\"line\">        plugin = &#123;&quot;json:build/result.json&quot;&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">public class StartTestCase &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的CucumberOptions注解是Cucumber运行器所需要的参数配置。</p>\n<h3 id=\"执行测试顺序\"><a href=\"#执行测试顺序\" class=\"headerlink\" title=\"执行测试顺序\"></a>执行测试顺序</h3><p>在一个测试类中如果哟多个测试方法例如有testA(),testB(),testC()，那么junit4是以什么顺序执行呢？如果在testng中我们可以通过dependsOnMethods来管理测试方法的顺序。<br>而junit4默认是通过方法名的字符串比较升序排序的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span><br><span class=\"line\">public class TestMethodOrder &#123;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testA() &#123;</span><br><span class=\"line\">        System.out.println(&quot;first&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testB() &#123;</span><br><span class=\"line\">        System.out.println(&quot;second&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testC() &#123;</span><br><span class=\"line\">        System.out.println(&quot;third&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异常测试\"><a href=\"#异常测试\" class=\"headerlink\" title=\"异常测试\"></a>异常测试</h3><p>当我们想验证一段代码是否抛出期望的异常时，就会用到异常测试，异常测试的使用时通过expected指定异常类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(expected = IndexOutOfBoundsException.class) </span><br><span class=\"line\">public void empty() &#123; </span><br><span class=\"line\">     new ArrayList&lt;Object&gt;().get(0); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除此之外我们可以通过@Rule，设定异常规则，这里我们只需要知道@Rule会提供一个切入点，在测试方法前后或中执行被@Rule标记的类逻辑。后面会再次介绍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class ThrowExceptionWithExpectedType &#123;</span><br><span class=\"line\">       @Rule</span><br><span class=\"line\">       public ExpectedException thrown = none();</span><br><span class=\"line\"></span><br><span class=\"line\">       @Test</span><br><span class=\"line\">       public void throwsNullPointerException1() &#123;</span><br><span class=\"line\">           thrown.expect(NullPointerException.class);</span><br><span class=\"line\">           throw new NullPointerException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Test</span><br><span class=\"line\">       public void throwsNullPointerException2() &#123;</span><br><span class=\"line\">           thrown.expect(NullPointerException.class);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"忽略测试\"><a href=\"#忽略测试\" class=\"headerlink\" title=\"忽略测试\"></a>忽略测试</h3><p>忽略测试被用来禁止执行junit测试类的某些或者全部测试方法。使用时只需要将@Ignore添加在类或者方法上即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Ignore(&quot;For a good reason&quot;)</span><br><span class=\"line\">public class IgnoreMe &#123;</span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void iFail() &#123;</span><br><span class=\"line\">            fail();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void iFailToo() &#123;</span><br><span class=\"line\">            fail();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Ignore</span><br><span class=\"line\">        @Test</span><br><span class=\"line\">        public void test() throws Exception &#123;</span><br><span class=\"line\">            fail(&quot;test() should not run&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时测试\"><a href=\"#超时测试\" class=\"headerlink\" title=\"超时测试\"></a>超时测试</h3><p> junit4使用@Timeout注解来测试任意特定方法的执行时间。如果测试方法的执行时间大于指定的超时参数，测试方法将抛出异常，测试结果为失败，指定的超时参数单位为毫秒</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test(timeout=1000)</span><br><span class=\"line\">public void testWithTimeout() &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>timeout超时测试的实现是通过创建一个守护线程来执行该测试方法的。同样我们也可以使用@Rule来创建超时规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class HasGlobalTimeout &#123;</span><br><span class=\"line\">    public static String log;</span><br><span class=\"line\">    @Rule</span><br><span class=\"line\">    public Timeout globalTimeout = Timeout.seconds(10); // 10 seconds max per method tested</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void testSleepForTooLong() throws Exception &#123;</span><br><span class=\"line\">        log += &quot;ran1&quot;;</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(100); // sleep for 100 seconds</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Timeout.seconds(10)设定每个方法超时规则。</p>\n<h3 id=\"参数化测试\"><a href=\"#参数化测试\" class=\"headerlink\" title=\"参数化测试\"></a>参数化测试</h3><p>junit支持参数化测试，但是使用起来比testng要复杂点，需要以下五步：</p>\n<ul>\n<li>对测试类添加注解 @RunWith(Parameterized.class)</li>\n<li>将需要使用参数定义为私有变量</li>\n<li>使用上一步骤声明的私有变量作为入参，创建构造函数</li>\n<li>创建一个使用@Parameters注解的公共静态方法，它将需要测试的各种变量值通过数组或集合的形式返回</li>\n<li>使用定义的私有变量定义测试方法</li>\n</ul>\n<p>例如我们使用一个函数来返回斐波那契数列中指定坐标的数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Fibonacci &#123;</span><br><span class=\"line\">    public static int compute(int n) &#123;</span><br><span class=\"line\">    \tint result = 0;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">        if (n &lt;= 1) &#123; </span><br><span class=\"line\">        \tresult = n; </span><br><span class=\"line\">        &#125; else &#123; </span><br><span class=\"line\">        \tresult = compute(n - 1) + compute(n - 2); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>斐波那契数列顺序应该是这样的：0,1,1,2,3,5,8。我们使用参数化的方式验证是否正确：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Parameterized.class)</span><br><span class=\"line\">public class FibonacciTest &#123;</span><br><span class=\"line\">    @Parameters</span><br><span class=\"line\">    public static Collection&lt;Object[]&gt; data() &#123;</span><br><span class=\"line\">        return Arrays.asList(new Object[][] &#123;     </span><br><span class=\"line\">                 &#123; 0, 0 &#125;, &#123; 1, 1 &#125;, &#123; 2, 1 &#125;, &#123; 3, 2 &#125;, &#123; 4, 3 &#125;, &#123; 5, 5 &#125;, &#123; 6, 8 &#125;  </span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int fInput;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int fExpected;</span><br><span class=\"line\"></span><br><span class=\"line\">    public FibonacciTest(int input, int expected) &#123;</span><br><span class=\"line\">        fInput= input;</span><br><span class=\"line\">        fExpected= expected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        assertEquals(fExpected, Fibonacci.compute(fInput));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里参数传递是通过构造函数的方式注入成成员变量，junit4还提供了@Parameter的方式来注入成员变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RunWith(Parameterized.class)</span><br><span class=\"line\">public class FibonacciTest &#123;</span><br><span class=\"line\">    @Parameters</span><br><span class=\"line\">    public static Collection&lt;Object[]&gt; data() &#123;</span><br><span class=\"line\">        return Arrays.asList(new Object[][] &#123;</span><br><span class=\"line\">                 &#123; 0, 0 &#125;, &#123; 1, 1 &#125;, &#123; 2, 1 &#125;, &#123; 3, 2 &#125;, &#123; 4, 3 &#125;, &#123; 5, 5 &#125;, &#123; 6, 8 &#125;  </span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Parameter // first data value (0) is default</span><br><span class=\"line\">    public /* NOT private */ int fInput;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Parameter(1)</span><br><span class=\"line\">    public /* NOT private */ int fExpected;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void test() &#123;</span><br><span class=\"line\">        assertEquals(fExpected, Fibonacci.compute(fInput));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Parameters有个name属性，它是通过二维数组参数来为一维数组生成一个名称，{index}代表当前参数的二维数组的index，{0}代表在二维数组中的第一个参数，{1}代表在二维数组中的第二个参数。例如下面这组参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> \t@RunWith(Parameterized.class)</span><br><span class=\"line\">    public static class AdditionTestWithArray &#123;</span><br><span class=\"line\">  \t\t@Parameters(name = &quot;&#123;index&#125;: &#123;0&#125; + &#123;1&#125; = &#123;2&#125;&quot;)</span><br><span class=\"line\">        public static Object[][] data() &#123;</span><br><span class=\"line\">            return new Object[][] &#123; &#123; 0, 0, 0 &#125;, &#123; 1, 1, 2 &#125;, &#123; 3, 2, 5 &#125;,</span><br><span class=\"line\">                    &#123; 4, 3, 7 &#125; &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成的测试case名称为：</p>\n<blockquote>\n<p>[0:0 + 0 = 0]<br>[1:1 + 1 = 2]<br>[2:3 + 2 = 5]<br>[3:4 + 3 = 7]</p>\n</blockquote>\n<p>同样，我们可以使用@Parameter(0)来选择注入二维数组中第一个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Parameter // first data value (0) is default</span><br><span class=\"line\">   public /* NOT private */ int fInput;</span><br></pre></td></tr></table></figure>\n<p>为了方便参数化，如果需要的参数只有一个，那么第四步可以不返回一个二维数组，可以是Iterable或一维数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Parameters</span><br><span class=\"line\">public static Iterable&lt;? extends Object&gt; data() &#123;</span><br><span class=\"line\">    return Arrays.asList(&quot;first test&quot;, &quot;second test&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">@Parameters</span><br><span class=\"line\">public static Object[] data() &#123;</span><br><span class=\"line\">    return new Object[] &#123; &quot;first test&quot;, &quot;second test&quot; &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h3><p>junit4的@Rule，有点类似AOP的思想，以被测试类为目标（target） ，以被测方法为切入点（Pointcut），我们自定义的规则，来定义通知、增强处理（Advice）就是你想要的功能。这里说的比较晦涩，我们举个例子：在测试方法执行过程中想创建一些临时文件，当方法结束了就自动删除临时文件，那么我们就可以使用系统提供的TemporaryFolder规则。TemporaryFolder会在每个方法执行前创建一个临时文件夹，在执行方法过程中创建的文件都会由临时文件夹管理，当方法结束后会自动删除。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class HasTempFolder &#123;</span><br><span class=\"line\">  @Rule</span><br><span class=\"line\">  public final TemporaryFolder folder = new TemporaryFolder();</span><br><span class=\"line\"></span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void testUsingTempFolder() throws IOException &#123;</span><br><span class=\"line\">    File createdFile = folder.newFile(&quot;myfile.txt&quot;);</span><br><span class=\"line\">    File createdFolder = folder.newFolder(&quot;subfolder&quot;);</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了TemporaryFolder规则外，junit4还提供了很多好用的规则：</p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TemporaryFolder</td>\n<td>管理临时文件</td>\n</tr>\n<tr>\n<td>ExternalResource</td>\n<td>管理额外的资源</td>\n</tr>\n<tr>\n<td>ErrorCollector</td>\n<td>错误收集</td>\n</tr>\n<tr>\n<td>WatchmanTest</td>\n<td>测试观察者，处理测试结果状态</td>\n</tr>\n<tr>\n<td>TestName</td>\n<td>获取测试方法名</td>\n</tr>\n<tr>\n<td>Timeout</td>\n<td>超时测试</td>\n</tr>\n<tr>\n<td>ExpectedException</td>\n<td>异常测试</td>\n</tr>\n</tbody>\n</table>\n<p>我们也可以自定义规则，只需要实现TestRule接口或MethodRule即可，如果同时实现两个接口则之后执行TestRule的apply，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class BothKindsOfRule implements TestRule, org.junit.rules.MethodRule &#123;</span><br><span class=\"line\">     public int applications = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">     public Statement apply(Statement base, FrameworkMethod method,</span><br><span class=\"line\">             Object target) &#123;</span><br><span class=\"line\">         applications++;</span><br><span class=\"line\">         return base;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     public Statement apply(Statement base, Description description) &#123;</span><br><span class=\"line\">         applications++;</span><br><span class=\"line\">         return base;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> public static class OneFieldTwoKindsOfRule &#123;</span><br><span class=\"line\">     @Rule</span><br><span class=\"line\">     public BothKindsOfRule both = new BothKindsOfRule();</span><br><span class=\"line\"></span><br><span class=\"line\">     @Test</span><br><span class=\"line\">     public void onlyOnce() &#123;</span><br><span class=\"line\">         assertEquals(1, both.applications);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分类测试\"><a href=\"#分类测试\" class=\"headerlink\" title=\"分类测试\"></a>分类测试</h3><p>在junit4中没有像testng中分组的概念，只用分类测试，使用时分为以下步骤：</p>\n<ul>\n<li>定义分类</li>\n<li>将方法标记分类</li>\n<li>指定@RunWith(Categories.class)运行器</li>\n<li>使用IncludeCategory或ExcludeCategory选择要执行的分类</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义两个分类</span><br><span class=\"line\">public interface FastTests &#123; /* category marker */ &#125;</span><br><span class=\"line\">public interface SlowTests &#123; /* category marker */ &#125;</span><br><span class=\"line\">//将方法分类</span><br><span class=\"line\">public class A &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void a() &#123;</span><br><span class=\"line\">    fail();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Category(SlowTests.class)</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void b() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//将类中的方法都分成相同的多个类</span><br><span class=\"line\">@Category(&#123;SlowTests.class, FastTests.class&#125;)</span><br><span class=\"line\">public class B &#123;</span><br><span class=\"line\">  @Test</span><br><span class=\"line\">  public void c() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//执行SlowTests分类的测试方法</span><br><span class=\"line\">@RunWith(Categories.class)</span><br><span class=\"line\">@IncludeCategory(SlowTests.class)</span><br><span class=\"line\">@ExcludeCategory(FastTests.class)</span><br><span class=\"line\">@SuiteClasses( &#123; A.class, B.class &#125;) // Note that Categories is a kind of Suite</span><br><span class=\"line\">public class SlowTestSuite &#123;</span><br><span class=\"line\">  // Will run A.b, but not A.a or B.c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我这里是使用gradle构建的工程，gradle提供了对junit4的支持，在test任务中，我们可以指定执行那些分类.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test &#123;</span><br><span class=\"line\">    useJUnit &#123;</span><br><span class=\"line\">        includeCategories &apos;org.gradle.junit.CategoryA&apos;</span><br><span class=\"line\">        excludeCategories &apos;org.gradle.junit.CategoryB&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"从零学自动化测试之appium编译","_content":"学习一门新技术，在有源码的情况下，最好能够自己编译、调试，这样才能最快的知其所以然，否则还是停留在使用的阶段，得不到质的提升。\n下面来编译appium\n<!-- more -->\n#### 准备 ###\n\n- [appium](https://github.com/appium/appium) 源码\n- [cnpm](https://npm.taobao.org/) 环境(加速npm)\n- node 环境(appium是node平台应用程序)\n- java 环境(android 需要)\n- android sdk\n- maven 环境(编译android相关app需要)\n- ant 环境(编译bootstrap需要)\n\n>主要配置：JAVA_HOME、ANDROID_HOME、ANT_HOME、M2_HOME、adb添加到path中、android-16跟android-19。可以使用sdk中的SDK Manager下载\n\n具体的环境配置可以网上搜索。最后可以使用appium-doctor --dev检查环境是否ok\n\n### 检查环境 ###\n设置好cnpm后可以以全局方式安装appium-doctor. 再用--dev查看环境状态\n> cnpm install -g appium-doctor \n> appium-doctor --dev\n\n![](https://i.imgur.com/VtCydyu.png)\n\n这里显示有一项maven没配置好，其实我的maven已经加入到path中，只是没有mvn.bat文件，并不影响。\n\n### 开始安装依赖 ###\n接下来进入源码目录开始编译appium\n> cnpm install\n\n> 注意：如果安装过程中有中断，或者更新源码，或者有异常，最好删除根目录下的node_modules 再cnpm install\n\n安装过程出现：\n>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”  不必担心，并不影响正常编译\n\n编译完成后再通过gulp transpile构建下\n最后执行 node . 启动appium\n ![](https://i.imgur.com/BzMBAQV.png)\n\n这样我们编译appium的工作就完成了。\n\n### webstrom调试 ###\n直接用webstrom打开根目录后，再添加一个node .配置：\n\n![](https://i.imgur.com/9CcVeuu.png)\n\n然后我们就可以用webstrom的debug模式调试了！\n\n\n\n\n","source":"_posts/从零学自动化测试之appium编译.md","raw":"---\ntitle: 从零学自动化测试之appium编译\ncategories:\n- 从零学自动化测试\ntags:\n- appium\n- 源码\n\n---\n学习一门新技术，在有源码的情况下，最好能够自己编译、调试，这样才能最快的知其所以然，否则还是停留在使用的阶段，得不到质的提升。\n下面来编译appium\n<!-- more -->\n#### 准备 ###\n\n- [appium](https://github.com/appium/appium) 源码\n- [cnpm](https://npm.taobao.org/) 环境(加速npm)\n- node 环境(appium是node平台应用程序)\n- java 环境(android 需要)\n- android sdk\n- maven 环境(编译android相关app需要)\n- ant 环境(编译bootstrap需要)\n\n>主要配置：JAVA_HOME、ANDROID_HOME、ANT_HOME、M2_HOME、adb添加到path中、android-16跟android-19。可以使用sdk中的SDK Manager下载\n\n具体的环境配置可以网上搜索。最后可以使用appium-doctor --dev检查环境是否ok\n\n### 检查环境 ###\n设置好cnpm后可以以全局方式安装appium-doctor. 再用--dev查看环境状态\n> cnpm install -g appium-doctor \n> appium-doctor --dev\n\n![](https://i.imgur.com/VtCydyu.png)\n\n这里显示有一项maven没配置好，其实我的maven已经加入到path中，只是没有mvn.bat文件，并不影响。\n\n### 开始安装依赖 ###\n接下来进入源码目录开始编译appium\n> cnpm install\n\n> 注意：如果安装过程中有中断，或者更新源码，或者有异常，最好删除根目录下的node_modules 再cnpm install\n\n安装过程出现：\n>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”  不必担心，并不影响正常编译\n\n编译完成后再通过gulp transpile构建下\n最后执行 node . 启动appium\n ![](https://i.imgur.com/BzMBAQV.png)\n\n这样我们编译appium的工作就完成了。\n\n### webstrom调试 ###\n直接用webstrom打开根目录后，再添加一个node .配置：\n\n![](https://i.imgur.com/9CcVeuu.png)\n\n然后我们就可以用webstrom的debug模式调试了！\n\n\n\n\n","slug":"从零学自动化测试之appium编译","published":1,"date":"2018-03-19T08:09:22.071Z","updated":"2018-03-19T08:09:22.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjcccs000aqoy8gz1pf2c4","content":"<p>学习一门新技术，在有源码的情况下，最好能够自己编译、调试，这样才能最快的知其所以然，否则还是停留在使用的阶段，得不到质的提升。<br>下面来编译appium<br><a id=\"more\"></a></p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li><a href=\"https://github.com/appium/appium\" target=\"_blank\" rel=\"noopener\">appium</a> 源码</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a> 环境(加速npm)</li>\n<li>node 环境(appium是node平台应用程序)</li>\n<li>java 环境(android 需要)</li>\n<li>android sdk</li>\n<li>maven 环境(编译android相关app需要)</li>\n<li>ant 环境(编译bootstrap需要)</li>\n</ul>\n<blockquote>\n<p>主要配置：JAVA_HOME、ANDROID_HOME、ANT_HOME、M2_HOME、adb添加到path中、android-16跟android-19。可以使用sdk中的SDK Manager下载</p>\n</blockquote>\n<p>具体的环境配置可以网上搜索。最后可以使用appium-doctor –dev检查环境是否ok</p>\n<h3 id=\"检查环境\"><a href=\"#检查环境\" class=\"headerlink\" title=\"检查环境\"></a>检查环境</h3><p>设置好cnpm后可以以全局方式安装appium-doctor. 再用–dev查看环境状态</p>\n<blockquote>\n<p>cnpm install -g appium-doctor<br>appium-doctor –dev</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/VtCydyu.png\" alt=\"\"></p>\n<p>这里显示有一项maven没配置好，其实我的maven已经加入到path中，只是没有mvn.bat文件，并不影响。</p>\n<h3 id=\"开始安装依赖\"><a href=\"#开始安装依赖\" class=\"headerlink\" title=\"开始安装依赖\"></a>开始安装依赖</h3><p>接下来进入源码目录开始编译appium</p>\n<blockquote>\n<p>cnpm install</p>\n</blockquote>\n<blockquote>\n<p>注意：如果安装过程中有中断，或者更新源码，或者有异常，最好删除根目录下的node_modules 再cnpm install</p>\n</blockquote>\n<p>安装过程出现：</p>\n<blockquote>\n<p>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”  不必担心，并不影响正常编译</p>\n</blockquote>\n<p>编译完成后再通过gulp transpile构建下<br>最后执行 node . 启动appium<br> <img src=\"https://i.imgur.com/BzMBAQV.png\" alt=\"\"></p>\n<p>这样我们编译appium的工作就完成了。</p>\n<h3 id=\"webstrom调试\"><a href=\"#webstrom调试\" class=\"headerlink\" title=\"webstrom调试\"></a>webstrom调试</h3><p>直接用webstrom打开根目录后，再添加一个node .配置：</p>\n<p><img src=\"https://i.imgur.com/9CcVeuu.png\" alt=\"\"></p>\n<p>然后我们就可以用webstrom的debug模式调试了！</p>\n","site":{"data":{}},"excerpt":"<p>学习一门新技术，在有源码的情况下，最好能够自己编译、调试，这样才能最快的知其所以然，否则还是停留在使用的阶段，得不到质的提升。<br>下面来编译appium<br>","more":"</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><ul>\n<li><a href=\"https://github.com/appium/appium\" target=\"_blank\" rel=\"noopener\">appium</a> 源码</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">cnpm</a> 环境(加速npm)</li>\n<li>node 环境(appium是node平台应用程序)</li>\n<li>java 环境(android 需要)</li>\n<li>android sdk</li>\n<li>maven 环境(编译android相关app需要)</li>\n<li>ant 环境(编译bootstrap需要)</li>\n</ul>\n<blockquote>\n<p>主要配置：JAVA_HOME、ANDROID_HOME、ANT_HOME、M2_HOME、adb添加到path中、android-16跟android-19。可以使用sdk中的SDK Manager下载</p>\n</blockquote>\n<p>具体的环境配置可以网上搜索。最后可以使用appium-doctor –dev检查环境是否ok</p>\n<h3 id=\"检查环境\"><a href=\"#检查环境\" class=\"headerlink\" title=\"检查环境\"></a>检查环境</h3><p>设置好cnpm后可以以全局方式安装appium-doctor. 再用–dev查看环境状态</p>\n<blockquote>\n<p>cnpm install -g appium-doctor<br>appium-doctor –dev</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/VtCydyu.png\" alt=\"\"></p>\n<p>这里显示有一项maven没配置好，其实我的maven已经加入到path中，只是没有mvn.bat文件，并不影响。</p>\n<h3 id=\"开始安装依赖\"><a href=\"#开始安装依赖\" class=\"headerlink\" title=\"开始安装依赖\"></a>开始安装依赖</h3><p>接下来进入源码目录开始编译appium</p>\n<blockquote>\n<p>cnpm install</p>\n</blockquote>\n<blockquote>\n<p>注意：如果安装过程中有中断，或者更新源码，或者有异常，最好删除根目录下的node_modules 再cnpm install</p>\n</blockquote>\n<p>安装过程出现：</p>\n<blockquote>\n<p>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”  不必担心，并不影响正常编译</p>\n</blockquote>\n<p>编译完成后再通过gulp transpile构建下<br>最后执行 node . 启动appium<br> <img src=\"https://i.imgur.com/BzMBAQV.png\" alt=\"\"></p>\n<p>这样我们编译appium的工作就完成了。</p>\n<h3 id=\"webstrom调试\"><a href=\"#webstrom调试\" class=\"headerlink\" title=\"webstrom调试\"></a>webstrom调试</h3><p>直接用webstrom打开根目录后，再添加一个node .配置：</p>\n<p><img src=\"https://i.imgur.com/9CcVeuu.png\" alt=\"\"></p>\n<p>然后我们就可以用webstrom的debug模式调试了！</p>"},{"title":"Java层调用Native层函数","_content":"\n先来看下java如何使用c的so库，第一步加载so、第二步找到so中调用方法，第三步调用so方法。\n- 第一步：在java中我们直接使用System.loadLibrary就能加载指定的so库了，一般都放在静态代码块中，只加载一次\n例如：\n\n```\nstatic { \t\n\t/* 1. load  这里要说的是，我们指定的是native字符串，但是找的是libnative.so，自动加上了lib前缀与so(linux平台)后缀。 */\n\tSystem.loadLibrary(\"native\"); /* libnative.so */\n}\n```\n<!-- more -->\n\n- 第二步：想在java代码中调用so的函数，首先要在java类中声明是本地方法：\n\n```\npublic native void hello();\n```\n所以java类完整代码是：\n\n```\npublic class JNIDemo {\n\tstatic { \t\t\n\t\tSystem.loadLibrary(\"native\"); /* libnative.so */\n \t}\n\tpublic native void hello();\n\tpublic static void main (String args[]) {\n\t\tJNIDemo d = new JNIDemo();\t\t\n\t\t/* 2. map java hello <-->c c_hello */\n\n\t\t/* 3. call */\n\t\td.hello();\n\t}\n}\n```\n接下来就是如何让我们的native方法与so中的方法映射,JNI提供了两种方式，显式与隐式。\n\n### 显式调用 ###\n\n- 显式调用(动态注册)：就是我们自己将native函数注册到java类中\n  原理：JNI在加载so库的使用会先执行一个固定的方法JNI_OnLoad函数，所以我们可以在这里建立我们的映射关系。\n  JNI中已经提供里映射的描述：JNINativeMethod结构体\n\n```\ntypedef struct {\n\tchar *name;  /* java里嗲用的方法名\n\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/\n\tvoid *fnPtr; /* C语言中实现的本地函数 */\n} JNINativeMethod;\n```\n通过这个结构体，我们就能将java中的native方法与c中的函数关联了。但是我们怎样建立关联呢？JNI提供了一个注册native方法的函数：\nRegisterNatives,它负责将native方法通过虚拟机注册到java的类中，这样就完成了java调用native函数了。本地native.c完整代码：\n\n```\n#include <jni.h>  /* /usr/lib/jvm/java-1.6.0-openjdk/include/ */\n#include <stdio.h>\n\n#if 0\ntypedef struct {\n\tchar *name;  /* java里嗲用的方法名\n\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/\n\tvoid *fnPtr; /* C语言中实现的本地函数 */\n} JNINativeMethod;\n#endif\n\nvoid c_hello(){\n\tprintf(\"hello world!\\n\");\n}\n\n\n/* 这个数组用来映射多个方法 */\nstatic const JNINativeMethod methods[] = {\n\t{\"hello\",\"()v\",(void *)c_hello},\n};\n\n\nJNI_OnLoad(JavaVM *jvm, void *reserved){\n\tJNIEnv *env;//java程序的运行环境\n\tjclass cls;\n\t\n\t/* 获得一个运行时环境 */\n\tif ((*jvm)->GetEnv(jvm, (void **)&env, JNI_VERSION_1_4)) {\n\t\treturn JNI_ERR; /* JNI version not supported */\n\t}\n\t/* 查找java中的JNIDemo类 */\n\tcls = (*env)->FindClass(env,\"JNIDemo\");\n\tif (cls == NULL) {\n\t\treturn JNI_ERR;\n\t}\n\t\n\t/**\n\t *使用运行时环境，建立映射 java hello <--> c c_hello \n\t *jint RegisterNatives(JNIEnv *env, jclass clazz,\n\t *const JNINativeMethod *methods, jint nMethods);\n\t */\n\tif((*env) -> RegisterNatives(env,cls,methods,1) < 0)\n\t\treturn JNI_ERR;\n\t\n\treturn JNI_VERSION_1_4;\n}\n```\n这里简单介绍下几个指针：\n\\*jvm 代表java虚拟机，每个进程都会有一个\n\\*env 代表每个线程的上下文环境，它提供了很多方法来操作java的类，对象等，如RegisterNatives、FindClass。\n如果想查看这些方法的完整签名可以在jni.h中查找。\nJNI_VERSION_1_4指定我们JNI的版本\n\n\n我们先生成动态库libnative.so\n> gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c\n \n这里的gcc -I是用来指定jni.h的位置，-shared -o libnative.so是生成so库的命令。\n再使用javac JNIDemo.java命令编译java文件\n在执行java JNIDemo前，我们还有告诉虚拟机到哪加载我们的so文件，export LD_LIBRARY_PATH=.  这代表到当前路径找so文件。\n完整的命令时：\n> javac JNIDemo.java\n//添加头文件的路径\ngcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c\n//表示去哪个目录去搜索这个库\nexport LD_LIBRARY_PATH=.\njava JNIDemo \n\n输出：\n> book@book-desktop:~/tmp$ java JNIDemo \nhello world\n\n\n\n\n### 隐私调用 ###\n- 隐式调用(静态注册)：我们只需要遵循JNI的书写规范，jvm会自动帮我们映射java中的native方法与c中的函数\n- 原理 ：使用javah -jni 可以生成一个.h的头文件，我们只要写一个c文件实现该.h函数就可以了。\n我们使用 javah -jni JNIDemo 生成的JNIDemo.h文件内容：\n\n```\n#include <jni.h>\n/* Header for class JNIDemo */\n#ifndef _Included_JNIDemo\n#define _Included_JNIDemo\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     JNIDemo\n * Method:    hello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_JNIDemo_hello\n  (JNIEnv *, jobject);\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n``` \n\n这里最重要的是JNIEXPORT void JNICALL Java\\_JNIDemo\\_hello(JNIEnv \\*, jobject);这个是我们hello方法的全路径名\n隐式调用就是在我们调用hello方法的时候，虚拟机先到对应的jni库中寻找该方法对应的全路径名本地方法，如果有那么就建立映射关系，\n否则报错。javah生成的方法名规则是：Java开头 + 包名+类名+方法名，如果遇到“\\_”则用“_l”代替。如果我们熟悉了JNI的字段描述符，\n自己也能写出方法的全路径名。\n我们新建一个native2 实现JNIDemo.h中的方法：\n\n\n\n> #include <jni.h> \n> \\#include <stdio.h>\n> JNIEXPORT void JNICALL Java\\_JNIDemo\\_hello(JNIEnv \\*env, jobject cls){\n\tprintf(\"hello world!\\n\");\n}\n\n\n然后我们生成so，执行Java JNIDemo\n>book@book-desktop:~/tmp$ ls\nJNIDemo.java  native2.c\nbook@book-desktop:~/tmp$ gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native2.c\nbook@book-desktop:~/tmp$ ls\nJNIDemo.java  libnative.so  native2.c\nbook@book-desktop:~/tmp$ javac JNIDemo.java \nbook@book-desktop:~/tmp$ java JNIDemo \nhello world\nbook@book-desktop:~/tmp$ \n\n### 总结： ###\n以上两种方式都是java层调用native层函数，相比起来，显示调用代码比较多，但是能很好的控制注册时机，而且自己映射方法，比较灵活\n，隐式调用就显得比较死板了，方法名必须按照一定的格式书写，一旦java层包名变化，so层的函数调用就会失败，但优点就是代码量少。\n大多数都是使用显示调用的。\n\n","source":"_posts/Java层调用Native层函数.md","raw":"---\ntitle: Java层调用Native层函数\ncategories:\n- java\ntags:\n- jni\n\n---\n\n先来看下java如何使用c的so库，第一步加载so、第二步找到so中调用方法，第三步调用so方法。\n- 第一步：在java中我们直接使用System.loadLibrary就能加载指定的so库了，一般都放在静态代码块中，只加载一次\n例如：\n\n```\nstatic { \t\n\t/* 1. load  这里要说的是，我们指定的是native字符串，但是找的是libnative.so，自动加上了lib前缀与so(linux平台)后缀。 */\n\tSystem.loadLibrary(\"native\"); /* libnative.so */\n}\n```\n<!-- more -->\n\n- 第二步：想在java代码中调用so的函数，首先要在java类中声明是本地方法：\n\n```\npublic native void hello();\n```\n所以java类完整代码是：\n\n```\npublic class JNIDemo {\n\tstatic { \t\t\n\t\tSystem.loadLibrary(\"native\"); /* libnative.so */\n \t}\n\tpublic native void hello();\n\tpublic static void main (String args[]) {\n\t\tJNIDemo d = new JNIDemo();\t\t\n\t\t/* 2. map java hello <-->c c_hello */\n\n\t\t/* 3. call */\n\t\td.hello();\n\t}\n}\n```\n接下来就是如何让我们的native方法与so中的方法映射,JNI提供了两种方式，显式与隐式。\n\n### 显式调用 ###\n\n- 显式调用(动态注册)：就是我们自己将native函数注册到java类中\n  原理：JNI在加载so库的使用会先执行一个固定的方法JNI_OnLoad函数，所以我们可以在这里建立我们的映射关系。\n  JNI中已经提供里映射的描述：JNINativeMethod结构体\n\n```\ntypedef struct {\n\tchar *name;  /* java里嗲用的方法名\n\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/\n\tvoid *fnPtr; /* C语言中实现的本地函数 */\n} JNINativeMethod;\n```\n通过这个结构体，我们就能将java中的native方法与c中的函数关联了。但是我们怎样建立关联呢？JNI提供了一个注册native方法的函数：\nRegisterNatives,它负责将native方法通过虚拟机注册到java的类中，这样就完成了java调用native函数了。本地native.c完整代码：\n\n```\n#include <jni.h>  /* /usr/lib/jvm/java-1.6.0-openjdk/include/ */\n#include <stdio.h>\n\n#if 0\ntypedef struct {\n\tchar *name;  /* java里嗲用的方法名\n\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/\n\tvoid *fnPtr; /* C语言中实现的本地函数 */\n} JNINativeMethod;\n#endif\n\nvoid c_hello(){\n\tprintf(\"hello world!\\n\");\n}\n\n\n/* 这个数组用来映射多个方法 */\nstatic const JNINativeMethod methods[] = {\n\t{\"hello\",\"()v\",(void *)c_hello},\n};\n\n\nJNI_OnLoad(JavaVM *jvm, void *reserved){\n\tJNIEnv *env;//java程序的运行环境\n\tjclass cls;\n\t\n\t/* 获得一个运行时环境 */\n\tif ((*jvm)->GetEnv(jvm, (void **)&env, JNI_VERSION_1_4)) {\n\t\treturn JNI_ERR; /* JNI version not supported */\n\t}\n\t/* 查找java中的JNIDemo类 */\n\tcls = (*env)->FindClass(env,\"JNIDemo\");\n\tif (cls == NULL) {\n\t\treturn JNI_ERR;\n\t}\n\t\n\t/**\n\t *使用运行时环境，建立映射 java hello <--> c c_hello \n\t *jint RegisterNatives(JNIEnv *env, jclass clazz,\n\t *const JNINativeMethod *methods, jint nMethods);\n\t */\n\tif((*env) -> RegisterNatives(env,cls,methods,1) < 0)\n\t\treturn JNI_ERR;\n\t\n\treturn JNI_VERSION_1_4;\n}\n```\n这里简单介绍下几个指针：\n\\*jvm 代表java虚拟机，每个进程都会有一个\n\\*env 代表每个线程的上下文环境，它提供了很多方法来操作java的类，对象等，如RegisterNatives、FindClass。\n如果想查看这些方法的完整签名可以在jni.h中查找。\nJNI_VERSION_1_4指定我们JNI的版本\n\n\n我们先生成动态库libnative.so\n> gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c\n \n这里的gcc -I是用来指定jni.h的位置，-shared -o libnative.so是生成so库的命令。\n再使用javac JNIDemo.java命令编译java文件\n在执行java JNIDemo前，我们还有告诉虚拟机到哪加载我们的so文件，export LD_LIBRARY_PATH=.  这代表到当前路径找so文件。\n完整的命令时：\n> javac JNIDemo.java\n//添加头文件的路径\ngcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c\n//表示去哪个目录去搜索这个库\nexport LD_LIBRARY_PATH=.\njava JNIDemo \n\n输出：\n> book@book-desktop:~/tmp$ java JNIDemo \nhello world\n\n\n\n\n### 隐私调用 ###\n- 隐式调用(静态注册)：我们只需要遵循JNI的书写规范，jvm会自动帮我们映射java中的native方法与c中的函数\n- 原理 ：使用javah -jni 可以生成一个.h的头文件，我们只要写一个c文件实现该.h函数就可以了。\n我们使用 javah -jni JNIDemo 生成的JNIDemo.h文件内容：\n\n```\n#include <jni.h>\n/* Header for class JNIDemo */\n#ifndef _Included_JNIDemo\n#define _Included_JNIDemo\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n/*\n * Class:     JNIDemo\n * Method:    hello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_JNIDemo_hello\n  (JNIEnv *, jobject);\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n``` \n\n这里最重要的是JNIEXPORT void JNICALL Java\\_JNIDemo\\_hello(JNIEnv \\*, jobject);这个是我们hello方法的全路径名\n隐式调用就是在我们调用hello方法的时候，虚拟机先到对应的jni库中寻找该方法对应的全路径名本地方法，如果有那么就建立映射关系，\n否则报错。javah生成的方法名规则是：Java开头 + 包名+类名+方法名，如果遇到“\\_”则用“_l”代替。如果我们熟悉了JNI的字段描述符，\n自己也能写出方法的全路径名。\n我们新建一个native2 实现JNIDemo.h中的方法：\n\n\n\n> #include <jni.h> \n> \\#include <stdio.h>\n> JNIEXPORT void JNICALL Java\\_JNIDemo\\_hello(JNIEnv \\*env, jobject cls){\n\tprintf(\"hello world!\\n\");\n}\n\n\n然后我们生成so，执行Java JNIDemo\n>book@book-desktop:~/tmp$ ls\nJNIDemo.java  native2.c\nbook@book-desktop:~/tmp$ gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native2.c\nbook@book-desktop:~/tmp$ ls\nJNIDemo.java  libnative.so  native2.c\nbook@book-desktop:~/tmp$ javac JNIDemo.java \nbook@book-desktop:~/tmp$ java JNIDemo \nhello world\nbook@book-desktop:~/tmp$ \n\n### 总结： ###\n以上两种方式都是java层调用native层函数，相比起来，显示调用代码比较多，但是能很好的控制注册时机，而且自己映射方法，比较灵活\n，隐式调用就显得比较死板了，方法名必须按照一定的格式书写，一旦java层包名变化，so层的函数调用就会失败，但优点就是代码量少。\n大多数都是使用显示调用的。\n\n","slug":"Java层调用Native层函数","published":1,"date":"2018-04-08T07:33:48.059Z","updated":"2018-04-08T07:33:48.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqjccd1000eqoy8f00umoaa","content":"<p>先来看下java如何使用c的so库，第一步加载so、第二步找到so中调用方法，第三步调用so方法。</p>\n<ul>\n<li>第一步：在java中我们直接使用System.loadLibrary就能加载指定的so库了，一般都放在静态代码块中，只加载一次<br>例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123; \t</span><br><span class=\"line\">\t/* 1. load  这里要说的是，我们指定的是native字符串，但是找的是libnative.so，自动加上了lib前缀与so(linux平台)后缀。 */</span><br><span class=\"line\">\tSystem.loadLibrary(&quot;native&quot;); /* libnative.so */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>第二步：想在java代码中调用so的函数，首先要在java类中声明是本地方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public native void hello();</span><br></pre></td></tr></table></figure>\n<p>所以java类完整代码是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JNIDemo &#123;</span><br><span class=\"line\">\tstatic &#123; \t\t</span><br><span class=\"line\">\t\tSystem.loadLibrary(&quot;native&quot;); /* libnative.so */</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">\tpublic native void hello();</span><br><span class=\"line\">\tpublic static void main (String args[]) &#123;</span><br><span class=\"line\">\t\tJNIDemo d = new JNIDemo();\t\t</span><br><span class=\"line\">\t\t/* 2. map java hello &lt;--&gt;c c_hello */</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/* 3. call */</span><br><span class=\"line\">\t\td.hello();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是如何让我们的native方法与so中的方法映射,JNI提供了两种方式，显式与隐式。</p>\n<h3 id=\"显式调用\"><a href=\"#显式调用\" class=\"headerlink\" title=\"显式调用\"></a>显式调用</h3><ul>\n<li>显式调用(动态注册)：就是我们自己将native函数注册到java类中<br>原理：JNI在加载so库的使用会先执行一个固定的方法JNI_OnLoad函数，所以我们可以在这里建立我们的映射关系。<br>JNI中已经提供里映射的描述：JNINativeMethod结构体</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tchar *name;  /* java里嗲用的方法名</span><br><span class=\"line\">\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/</span><br><span class=\"line\">\tvoid *fnPtr; /* C语言中实现的本地函数 */</span><br><span class=\"line\">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure>\n<p>通过这个结构体，我们就能将java中的native方法与c中的函数关联了。但是我们怎样建立关联呢？JNI提供了一个注册native方法的函数：<br>RegisterNatives,它负责将native方法通过虚拟机注册到java的类中，这样就完成了java调用native函数了。本地native.c完整代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;jni.h&gt;  /* /usr/lib/jvm/java-1.6.0-openjdk/include/ */</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#if 0</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tchar *name;  /* java里嗲用的方法名</span><br><span class=\"line\">\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/</span><br><span class=\"line\">\tvoid *fnPtr; /* C语言中实现的本地函数 */</span><br><span class=\"line\">&#125; JNINativeMethod;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">void c_hello()&#123;</span><br><span class=\"line\">\tprintf(&quot;hello world!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 这个数组用来映射多个方法 */</span><br><span class=\"line\">static const JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">\t&#123;&quot;hello&quot;,&quot;()v&quot;,(void *)c_hello&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">JNI_OnLoad(JavaVM *jvm, void *reserved)&#123;</span><br><span class=\"line\">\tJNIEnv *env;//java程序的运行环境</span><br><span class=\"line\">\tjclass cls;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/* 获得一个运行时环境 */</span><br><span class=\"line\">\tif ((*jvm)-&gt;GetEnv(jvm, (void **)&amp;env, JNI_VERSION_1_4)) &#123;</span><br><span class=\"line\">\t\treturn JNI_ERR; /* JNI version not supported */</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/* 查找java中的JNIDemo类 */</span><br><span class=\"line\">\tcls = (*env)-&gt;FindClass(env,&quot;JNIDemo&quot;);</span><br><span class=\"line\">\tif (cls == NULL) &#123;</span><br><span class=\"line\">\t\treturn JNI_ERR;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t *使用运行时环境，建立映射 java hello &lt;--&gt; c c_hello </span><br><span class=\"line\">\t *jint RegisterNatives(JNIEnv *env, jclass clazz,</span><br><span class=\"line\">\t *const JNINativeMethod *methods, jint nMethods);</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tif((*env) -&gt; RegisterNatives(env,cls,methods,1) &lt; 0)</span><br><span class=\"line\">\t\treturn JNI_ERR;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn JNI_VERSION_1_4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里简单介绍下几个指针：<br>*jvm 代表java虚拟机，每个进程都会有一个<br>*env 代表每个线程的上下文环境，它提供了很多方法来操作java的类，对象等，如RegisterNatives、FindClass。<br>如果想查看这些方法的完整签名可以在jni.h中查找。<br>JNI_VERSION_1_4指定我们JNI的版本</p>\n<p>我们先生成动态库libnative.so</p>\n<blockquote>\n<p>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c</p>\n</blockquote>\n<p>这里的gcc -I是用来指定jni.h的位置，-shared -o libnative.so是生成so库的命令。<br>再使用javac JNIDemo.java命令编译java文件<br>在执行java JNIDemo前，我们还有告诉虚拟机到哪加载我们的so文件，export LD_LIBRARY_PATH=.  这代表到当前路径找so文件。<br>完整的命令时：</p>\n<blockquote>\n<p>javac JNIDemo.java<br>//添加头文件的路径<br>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c<br>//表示去哪个目录去搜索这个库<br>export LD_LIBRARY_PATH=.<br>java JNIDemo </p>\n</blockquote>\n<p>输出：</p>\n<blockquote>\n<p>book@book-desktop:~/tmp$ java JNIDemo<br>hello world</p>\n</blockquote>\n<h3 id=\"隐私调用\"><a href=\"#隐私调用\" class=\"headerlink\" title=\"隐私调用\"></a>隐私调用</h3><ul>\n<li>隐式调用(静态注册)：我们只需要遵循JNI的书写规范，jvm会自动帮我们映射java中的native方法与c中的函数</li>\n<li>原理 ：使用javah -jni 可以生成一个.h的头文件，我们只要写一个c文件实现该.h函数就可以了。<br>我们使用 javah -jni JNIDemo 生成的JNIDemo.h文件内容：</li>\n</ul>\n<pre><code>#include &lt;jni.h&gt;\n/* Header for class JNIDemo */\n#ifndef _Included_JNIDemo\n#define _Included_JNIDemo\n#ifdef __cplusplus\nextern &quot;C&quot; {\n#endif\n/*\n * Class:     JNIDemo\n * Method:    hello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_JNIDemo_hello\n  (JNIEnv *, jobject);\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n</code></pre><p>这里最重要的是JNIEXPORT void JNICALL Java_JNIDemo_hello(JNIEnv *, jobject);这个是我们hello方法的全路径名<br>隐式调用就是在我们调用hello方法的时候，虚拟机先到对应的jni库中寻找该方法对应的全路径名本地方法，如果有那么就建立映射关系，<br>否则报错。javah生成的方法名规则是：Java开头 + 包名+类名+方法名，如果遇到“_”则用“_l”代替。如果我们熟悉了JNI的字段描述符，<br>自己也能写出方法的全路径名。<br>我们新建一个native2 实现JNIDemo.h中的方法：</p>\n<blockquote>\n<p>#include &lt;jni.h&gt;<br>#include &lt;stdio.h&gt;<br>JNIEXPORT void JNICALL Java_JNIDemo_hello(JNIEnv *env, jobject cls){<br>    printf(“hello world!\\n”);<br>}</p>\n</blockquote>\n<p>然后我们生成so，执行Java JNIDemo</p>\n<blockquote>\n<p>book@book-desktop:~/tmp$ ls<br>JNIDemo.java  native2.c<br>book@book-desktop:~/tmp$ gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native2.c<br>book@book-desktop:~/tmp$ ls<br>JNIDemo.java  libnative.so  native2.c<br>book@book-desktop:~/tmp$ javac JNIDemo.java<br>book@book-desktop:~/tmp$ java JNIDemo<br>hello world<br>book@book-desktop:~/tmp$ </p>\n</blockquote>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>以上两种方式都是java层调用native层函数，相比起来，显示调用代码比较多，但是能很好的控制注册时机，而且自己映射方法，比较灵活<br>，隐式调用就显得比较死板了，方法名必须按照一定的格式书写，一旦java层包名变化，so层的函数调用就会失败，但优点就是代码量少。<br>大多数都是使用显示调用的。</p>\n","site":{"data":{}},"excerpt":"<p>先来看下java如何使用c的so库，第一步加载so、第二步找到so中调用方法，第三步调用so方法。</p>\n<ul>\n<li>第一步：在java中我们直接使用System.loadLibrary就能加载指定的so库了，一般都放在静态代码块中，只加载一次<br>例如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123; \t</span><br><span class=\"line\">\t/* 1. load  这里要说的是，我们指定的是native字符串，但是找的是libnative.so，自动加上了lib前缀与so(linux平台)后缀。 */</span><br><span class=\"line\">\tSystem.loadLibrary(&quot;native&quot;); /* libnative.so */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>第二步：想在java代码中调用so的函数，首先要在java类中声明是本地方法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public native void hello();</span><br></pre></td></tr></table></figure>\n<p>所以java类完整代码是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JNIDemo &#123;</span><br><span class=\"line\">\tstatic &#123; \t\t</span><br><span class=\"line\">\t\tSystem.loadLibrary(&quot;native&quot;); /* libnative.so */</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">\tpublic native void hello();</span><br><span class=\"line\">\tpublic static void main (String args[]) &#123;</span><br><span class=\"line\">\t\tJNIDemo d = new JNIDemo();\t\t</span><br><span class=\"line\">\t\t/* 2. map java hello &lt;--&gt;c c_hello */</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t/* 3. call */</span><br><span class=\"line\">\t\td.hello();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是如何让我们的native方法与so中的方法映射,JNI提供了两种方式，显式与隐式。</p>\n<h3 id=\"显式调用\"><a href=\"#显式调用\" class=\"headerlink\" title=\"显式调用\"></a>显式调用</h3><ul>\n<li>显式调用(动态注册)：就是我们自己将native函数注册到java类中<br>原理：JNI在加载so库的使用会先执行一个固定的方法JNI_OnLoad函数，所以我们可以在这里建立我们的映射关系。<br>JNI中已经提供里映射的描述：JNINativeMethod结构体</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tchar *name;  /* java里嗲用的方法名</span><br><span class=\"line\">\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/</span><br><span class=\"line\">\tvoid *fnPtr; /* C语言中实现的本地函数 */</span><br><span class=\"line\">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure>\n<p>通过这个结构体，我们就能将java中的native方法与c中的函数关联了。但是我们怎样建立关联呢？JNI提供了一个注册native方法的函数：<br>RegisterNatives,它负责将native方法通过虚拟机注册到java的类中，这样就完成了java调用native函数了。本地native.c完整代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;jni.h&gt;  /* /usr/lib/jvm/java-1.6.0-openjdk/include/ */</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#if 0</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">\tchar *name;  /* java里嗲用的方法名</span><br><span class=\"line\">\tchar *signature; /* JNI字段描述符，用来表示Java里调用的方法的签名*/</span><br><span class=\"line\">\tvoid *fnPtr; /* C语言中实现的本地函数 */</span><br><span class=\"line\">&#125; JNINativeMethod;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">void c_hello()&#123;</span><br><span class=\"line\">\tprintf(&quot;hello world!\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* 这个数组用来映射多个方法 */</span><br><span class=\"line\">static const JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">\t&#123;&quot;hello&quot;,&quot;()v&quot;,(void *)c_hello&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">JNI_OnLoad(JavaVM *jvm, void *reserved)&#123;</span><br><span class=\"line\">\tJNIEnv *env;//java程序的运行环境</span><br><span class=\"line\">\tjclass cls;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/* 获得一个运行时环境 */</span><br><span class=\"line\">\tif ((*jvm)-&gt;GetEnv(jvm, (void **)&amp;env, JNI_VERSION_1_4)) &#123;</span><br><span class=\"line\">\t\treturn JNI_ERR; /* JNI version not supported */</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t/* 查找java中的JNIDemo类 */</span><br><span class=\"line\">\tcls = (*env)-&gt;FindClass(env,&quot;JNIDemo&quot;);</span><br><span class=\"line\">\tif (cls == NULL) &#123;</span><br><span class=\"line\">\t\treturn JNI_ERR;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t *使用运行时环境，建立映射 java hello &lt;--&gt; c c_hello </span><br><span class=\"line\">\t *jint RegisterNatives(JNIEnv *env, jclass clazz,</span><br><span class=\"line\">\t *const JNINativeMethod *methods, jint nMethods);</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\tif((*env) -&gt; RegisterNatives(env,cls,methods,1) &lt; 0)</span><br><span class=\"line\">\t\treturn JNI_ERR;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn JNI_VERSION_1_4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里简单介绍下几个指针：<br>*jvm 代表java虚拟机，每个进程都会有一个<br>*env 代表每个线程的上下文环境，它提供了很多方法来操作java的类，对象等，如RegisterNatives、FindClass。<br>如果想查看这些方法的完整签名可以在jni.h中查找。<br>JNI_VERSION_1_4指定我们JNI的版本</p>\n<p>我们先生成动态库libnative.so</p>\n<blockquote>\n<p>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c</p>\n</blockquote>\n<p>这里的gcc -I是用来指定jni.h的位置，-shared -o libnative.so是生成so库的命令。<br>再使用javac JNIDemo.java命令编译java文件<br>在执行java JNIDemo前，我们还有告诉虚拟机到哪加载我们的so文件，export LD_LIBRARY_PATH=.  这代表到当前路径找so文件。<br>完整的命令时：</p>\n<blockquote>\n<p>javac JNIDemo.java<br>//添加头文件的路径<br>gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native.c<br>//表示去哪个目录去搜索这个库<br>export LD_LIBRARY_PATH=.<br>java JNIDemo </p>\n</blockquote>\n<p>输出：</p>\n<blockquote>\n<p>book@book-desktop:~/tmp$ java JNIDemo<br>hello world</p>\n</blockquote>\n<h3 id=\"隐私调用\"><a href=\"#隐私调用\" class=\"headerlink\" title=\"隐私调用\"></a>隐私调用</h3><ul>\n<li>隐式调用(静态注册)：我们只需要遵循JNI的书写规范，jvm会自动帮我们映射java中的native方法与c中的函数</li>\n<li>原理 ：使用javah -jni 可以生成一个.h的头文件，我们只要写一个c文件实现该.h函数就可以了。<br>我们使用 javah -jni JNIDemo 生成的JNIDemo.h文件内容：</li>\n</ul>\n<pre><code>#include &lt;jni.h&gt;\n/* Header for class JNIDemo */\n#ifndef _Included_JNIDemo\n#define _Included_JNIDemo\n#ifdef __cplusplus\nextern &quot;C&quot; {\n#endif\n/*\n * Class:     JNIDemo\n * Method:    hello\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_JNIDemo_hello\n  (JNIEnv *, jobject);\n#ifdef __cplusplus\n}\n#endif\n#endif\n\n</code></pre><p>这里最重要的是JNIEXPORT void JNICALL Java_JNIDemo_hello(JNIEnv *, jobject);这个是我们hello方法的全路径名<br>隐式调用就是在我们调用hello方法的时候，虚拟机先到对应的jni库中寻找该方法对应的全路径名本地方法，如果有那么就建立映射关系，<br>否则报错。javah生成的方法名规则是：Java开头 + 包名+类名+方法名，如果遇到“_”则用“_l”代替。如果我们熟悉了JNI的字段描述符，<br>自己也能写出方法的全路径名。<br>我们新建一个native2 实现JNIDemo.h中的方法：</p>\n<blockquote>\n<p>#include &lt;jni.h&gt;<br>#include &lt;stdio.h&gt;<br>JNIEXPORT void JNICALL Java_JNIDemo_hello(JNIEnv *env, jobject cls){<br>    printf(“hello world!\\n”);<br>}</p>\n</blockquote>\n<p>然后我们生成so，执行Java JNIDemo</p>\n<blockquote>\n<p>book@book-desktop:~/tmp$ ls<br>JNIDemo.java  native2.c<br>book@book-desktop:~/tmp$ gcc -I/usr/lib/jvm/java-1.6.0-openjdk/include/ -shared -o libnative.so native2.c<br>book@book-desktop:~/tmp$ ls<br>JNIDemo.java  libnative.so  native2.c<br>book@book-desktop:~/tmp$ javac JNIDemo.java<br>book@book-desktop:~/tmp$ java JNIDemo<br>hello world<br>book@book-desktop:~/tmp$ </p>\n</blockquote>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>以上两种方式都是java层调用native层函数，相比起来，显示调用代码比较多，但是能很好的控制注册时机，而且自己映射方法，比较灵活<br>，隐式调用就显得比较死板了，方法名必须按照一定的格式书写，一旦java层包名变化，so层的函数调用就会失败，但优点就是代码量少。<br>大多数都是使用显示调用的。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfqjccc70001qoy8zbjmtsdx","category_id":"cjfqjcccj0005qoy87ub4q01t","_id":"cjfqjccd3000fqoy8lc283ueo"},{"post_id":"cjfqjccd1000eqoy8f00umoaa","category_id":"cjfqjcccz000bqoy83e529gck","_id":"cjfqjccd4000kqoy8t27p7sn3"},{"post_id":"cjfqjccce0003qoy8gybs9oj5","category_id":"cjfqjcccz000bqoy83e529gck","_id":"cjfqjccd6000nqoy8nlcr7i7f"},{"post_id":"cjfqjcccm0007qoy82ooj1s6j","category_id":"cjfqjccd3000gqoy8r5815wvb","_id":"cjfqjccd6000qqoy84ikw2s2l"},{"post_id":"cjfqjcccr0009qoy8ym47as4k","category_id":"cjfqjccd3000gqoy8r5815wvb","_id":"cjfqjccd7000tqoy8gjqmw2oc"},{"post_id":"cjfqjcccs000aqoy8gz1pf2c4","category_id":"cjfqjccd3000gqoy8r5815wvb","_id":"cjfqjccd8000vqoy8idoxe24i"}],"PostTag":[{"post_id":"cjfqjccc70001qoy8zbjmtsdx","tag_id":"cjfqjcccm0006qoy8l2qpsp9c","_id":"cjfqjccd0000dqoy86suaqlmq"},{"post_id":"cjfqjccd1000eqoy8f00umoaa","tag_id":"cjfqjcccz000cqoy8uu9910xl","_id":"cjfqjccd4000iqoy8eeeza89f"},{"post_id":"cjfqjccce0003qoy8gybs9oj5","tag_id":"cjfqjcccz000cqoy8uu9910xl","_id":"cjfqjccd4000jqoy8rg7f0ftm"},{"post_id":"cjfqjcccm0007qoy82ooj1s6j","tag_id":"cjfqjccd4000hqoy8uj4q6w0i","_id":"cjfqjccd6000oqoy8yxv2x811"},{"post_id":"cjfqjcccr0009qoy8ym47as4k","tag_id":"cjfqjccd5000mqoy8o9oyrrxk","_id":"cjfqjccd7000sqoy8gsxwubhz"},{"post_id":"cjfqjcccs000aqoy8gz1pf2c4","tag_id":"cjfqjccd4000hqoy8uj4q6w0i","_id":"cjfqjccd8000wqoy8rm9gnjpu"},{"post_id":"cjfqjcccs000aqoy8gz1pf2c4","tag_id":"cjfqjccd7000uqoy8xijdb9my","_id":"cjfqjccd8000xqoy837olab34"}],"Tag":[{"name":"Performance","_id":"cjfqjcccm0006qoy8l2qpsp9c"},{"name":"jni","_id":"cjfqjcccz000cqoy8uu9910xl"},{"name":"appium","_id":"cjfqjccd4000hqoy8uj4q6w0i"},{"name":"junit","_id":"cjfqjccd5000mqoy8o9oyrrxk"},{"name":"源码","_id":"cjfqjccd7000uqoy8xijdb9my"}]}}